

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Mon Dec 18 17:17:56 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	maintext,global,class=CODE,split=1,delta=2
     7                           	psect	text1,local,class=CODE,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,merge=1,delta=2
     9                           	psect	text3,local,class=CODE,merge=1,delta=2
    10                           	psect	text4,local,class=CODE,merge=1,delta=2
    11                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    12                           	dabs	1,0x7E,2
    13     0000                     
    14                           ; Generated 22/03/2023 GMT
    15                           ; 
    16                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    17                           ; All rights reserved.
    18                           ; 
    19                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    20                           ; 
    21                           ; Redistribution and use in source and binary forms, with or without modification, are
    22                           ; permitted provided that the following conditions are met:
    23                           ; 
    24                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    25                           ;        conditions and the following disclaimer.
    26                           ; 
    27                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    28                           ;        of conditions and the following disclaimer in the documentation and/or other
    29                           ;        materials provided with the distribution. Publication is not required when
    30                           ;        this file is used in an embedded application.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F877A Definitions
    46                           ; 
    47                           ; SFR Addresses
    48     0000                     	;# 
    49     0001                     	;# 
    50     0002                     	;# 
    51     0003                     	;# 
    52     0004                     	;# 
    53     0005                     	;# 
    54     0006                     	;# 
    55     0007                     	;# 
    56     0008                     	;# 
    57     0009                     	;# 
    58     000A                     	;# 
    59     000B                     	;# 
    60     000C                     	;# 
    61     000D                     	;# 
    62     000E                     	;# 
    63     000E                     	;# 
    64     000F                     	;# 
    65     0010                     	;# 
    66     0011                     	;# 
    67     0012                     	;# 
    68     0013                     	;# 
    69     0014                     	;# 
    70     0015                     	;# 
    71     0015                     	;# 
    72     0016                     	;# 
    73     0017                     	;# 
    74     0018                     	;# 
    75     0019                     	;# 
    76     001A                     	;# 
    77     001B                     	;# 
    78     001B                     	;# 
    79     001C                     	;# 
    80     001D                     	;# 
    81     001E                     	;# 
    82     001F                     	;# 
    83     0081                     	;# 
    84     0085                     	;# 
    85     0086                     	;# 
    86     0087                     	;# 
    87     0088                     	;# 
    88     0089                     	;# 
    89     008C                     	;# 
    90     008D                     	;# 
    91     008E                     	;# 
    92     0091                     	;# 
    93     0092                     	;# 
    94     0093                     	;# 
    95     0094                     	;# 
    96     0098                     	;# 
    97     0099                     	;# 
    98     009C                     	;# 
    99     009D                     	;# 
   100     009E                     	;# 
   101     009F                     	;# 
   102     010C                     	;# 
   103     010D                     	;# 
   104     010E                     	;# 
   105     010F                     	;# 
   106     018C                     	;# 
   107     018D                     	;# 
   108     0000                     	;# 
   109     0001                     	;# 
   110     0002                     	;# 
   111     0003                     	;# 
   112     0004                     	;# 
   113     0005                     	;# 
   114     0006                     	;# 
   115     0007                     	;# 
   116     0008                     	;# 
   117     0009                     	;# 
   118     000A                     	;# 
   119     000B                     	;# 
   120     000C                     	;# 
   121     000D                     	;# 
   122     000E                     	;# 
   123     000E                     	;# 
   124     000F                     	;# 
   125     0010                     	;# 
   126     0011                     	;# 
   127     0012                     	;# 
   128     0013                     	;# 
   129     0014                     	;# 
   130     0015                     	;# 
   131     0015                     	;# 
   132     0016                     	;# 
   133     0017                     	;# 
   134     0018                     	;# 
   135     0019                     	;# 
   136     001A                     	;# 
   137     001B                     	;# 
   138     001B                     	;# 
   139     001C                     	;# 
   140     001D                     	;# 
   141     001E                     	;# 
   142     001F                     	;# 
   143     0081                     	;# 
   144     0085                     	;# 
   145     0086                     	;# 
   146     0087                     	;# 
   147     0088                     	;# 
   148     0089                     	;# 
   149     008C                     	;# 
   150     008D                     	;# 
   151     008E                     	;# 
   152     0091                     	;# 
   153     0092                     	;# 
   154     0093                     	;# 
   155     0094                     	;# 
   156     0098                     	;# 
   157     0099                     	;# 
   158     009C                     	;# 
   159     009D                     	;# 
   160     009E                     	;# 
   161     009F                     	;# 
   162     010C                     	;# 
   163     010D                     	;# 
   164     010E                     	;# 
   165     010F                     	;# 
   166     018C                     	;# 
   167     018D                     	;# 
   168     0008                     _PORTD	set	8
   169     0007                     _PORTC	set	7
   170     001E                     _ADRESH	set	30
   171     001F                     _ADCON0	set	31
   172     0006                     _PORTBbits	set	6
   173     0006                     _PORTB	set	6
   174     00FA                     _GO_nDONE	set	250
   175     0087                     _TRISC	set	135
   176     0088                     _TRISD	set	136
   177     0086                     _TRISB	set	134
   178     009E                     _ADRESL	set	158
   179     009F                     _ADCON1	set	159
   180     0428                     _TRISA0	set	1064
   181                           
   182                           	psect	cinit
   183     07FC                     start_initialization:	
   184                           ; #config settings
   185                           
   186     07FC                     __initialization:
   187     07FC                     end_of_initialization:	
   188                           ;End of C runtime variable initialization code
   189                           
   190     07FC                     __end_of__initialization:
   191     07FC  0183               	clrf	3
   192     07FD  120A  118A  2F7E   	ljmp	_main	;jump to C main() function
   193                           
   194                           	psect	cstackCOMMON
   195     0070                     __pcstackCOMMON:
   196     0070                     ?_LCD_Cmd:
   197     0070                     ??_LCD_Cmd:	
   198                           ; 1 bytes @ 0x0
   199                           
   200     0070                     ?_LCD_Init:	
   201                           ; 1 bytes @ 0x0
   202                           
   203     0070                     ?_ADC_Init:	
   204                           ; 1 bytes @ 0x0
   205                           
   206     0070                     ??_ADC_Init:	
   207                           ; 1 bytes @ 0x0
   208                           
   209     0070                     ?_main:	
   210                           ; 1 bytes @ 0x0
   211                           
   212     0070                     ?_ADC_Read:	
   213                           ; 1 bytes @ 0x0
   214                           
   215                           
   216                           ; 2 bytes @ 0x0
   217     0070                     	ds	2
   218     0072                     ??_ADC_Read:
   219     0072                     LCD_Cmd@data:	
   220                           ; 1 bytes @ 0x2
   221                           
   222                           
   223                           ; 1 bytes @ 0x2
   224     0072                     	ds	1
   225     0073                     ??_LCD_Init:
   226                           
   227                           ; 1 bytes @ 0x3
   228     0073                     	ds	1
   229     0074                     ADC_Read@channel:
   230                           
   231                           ; 1 bytes @ 0x4
   232     0074                     	ds	1
   233     0075                     ??_main:
   234     0075                     main@ADC:	
   235                           ; 1 bytes @ 0x5
   236                           
   237                           
   238                           ; 2 bytes @ 0x5
   239     0075                     	ds	2
   240                           
   241                           	psect	maintext
   242     077E                     __pmaintext:	
   243 ;;
   244 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   245 ;;
   246 ;; *************** function _main *****************
   247 ;; Defined at:
   248 ;;		line 87 in file "main.c"
   249 ;; Parameters:    Size  Location     Type
   250 ;;		None
   251 ;; Auto vars:     Size  Location     Type
   252 ;;  dienap          4    0        float 
   253 ;;  ADC             2    5[COMMON] unsigned int 
   254 ;; Return value:  Size  Location     Type
   255 ;;                  1    wreg      void 
   256 ;; Registers used:
   257 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   258 ;; Tracked objects:
   259 ;;		On entry : B00/0
   260 ;;		On exit  : 0/0
   261 ;;		Unchanged: 0/0
   262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   263 ;;      Params:         0       0       0       0       0
   264 ;;      Locals:         2       0       0       0       0
   265 ;;      Temps:          0       0       0       0       0
   266 ;;      Totals:         2       0       0       0       0
   267 ;;Total ram usage:        2 bytes
   268 ;; Hardware stack levels required when called: 2
   269 ;; This function calls:
   270 ;;		_ADC_Init
   271 ;;		_ADC_Read
   272 ;;		_LCD_Init
   273 ;; This function is called by:
   274 ;;		Startup code after reset
   275 ;; This function uses a non-reentrant model
   276 ;;
   277                           
   278     077E                     _main:	
   279                           ;psect for function _main
   280                           
   281     077E                     l698:	
   282                           ;incstack = 0
   283                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   284                           
   285     077E  1683               	bsf	3,5	;RP0=1, select bank1
   286     077F  1303               	bcf	3,6	;RP1=0, select bank1
   287     0780  0186               	clrf	6	;volatile
   288     0781                     l700:
   289     0781  1405               	bsf	5,0	;volatile
   290     0782  0188               	clrf	8	;volatile
   291     0783  0187               	clrf	7	;volatile
   292     0784                     l702:
   293     0784  120A  118A  275F  120A  118A  	fcall	_LCD_Init
   294     0789                     l704:
   295     0789  120A  118A  2756  120A  118A  	fcall	_ADC_Init
   296     078E                     l706:
   297     078E  3000               	movlw	0
   298     078F  120A  118A  27A2  120A  118A  	fcall	_ADC_Read
   299     0794  0871               	movf	?_ADC_Read+1,w
   300     0795  00F6               	movwf	main@ADC+1
   301     0796  0870               	movf	?_ADC_Read,w
   302     0797  00F5               	movwf	main@ADC
   303     0798                     l708:
   304     0798  0875               	movf	main@ADC,w
   305     0799  1283               	bcf	3,5	;RP0=0, select bank0
   306     079A  1303               	bcf	3,6	;RP1=0, select bank0
   307     079B  0087               	movwf	7	;volatile
   308     079C                     l710:
   309     079C  0876               	movf	main@ADC+1,w
   310     079D  0088               	movwf	8	;volatile
   311     079E  2F8E               	goto	l706
   312     079F  120A  118A  2800   	ljmp	start
   313     07A2                     __end_of_main:
   314                           
   315                           	psect	text1
   316     075F                     __ptext1:	
   317 ;; *************** function _LCD_Init *****************
   318 ;; Defined at:
   319 ;;		line 58 in file "main.c"
   320 ;; Parameters:    Size  Location     Type
   321 ;;		None
   322 ;; Auto vars:     Size  Location     Type
   323 ;;		None
   324 ;; Return value:  Size  Location     Type
   325 ;;                  1    wreg      void 
   326 ;; Registers used:
   327 ;;		wreg, status,2, status,0, pclath, cstack
   328 ;; Tracked objects:
   329 ;;		On entry : 0/0
   330 ;;		On exit  : 0/0
   331 ;;		Unchanged: 0/0
   332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   333 ;;      Params:         0       0       0       0       0
   334 ;;      Locals:         0       0       0       0       0
   335 ;;      Temps:          0       0       0       0       0
   336 ;;      Totals:         0       0       0       0       0
   337 ;;Total ram usage:        0 bytes
   338 ;; Hardware stack levels used: 1
   339 ;; Hardware stack levels required when called: 1
   340 ;; This function calls:
   341 ;;		_LCD_Cmd
   342 ;; This function is called by:
   343 ;;		_main
   344 ;; This function uses a non-reentrant model
   345 ;;
   346                           
   347     075F                     _LCD_Init:	
   348                           ;psect for function _LCD_Init
   349                           
   350     075F                     l652:	
   351                           ;incstack = 0
   352                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
   353                           
   354                           
   355                           ;main.c: 59:   ADCON0 |= channel<<3;
   356     075F  3002               	movlw	2
   357     0760  120A  118A  27CD  120A  118A  	fcall	_LCD_Cmd
   358                           
   359                           ;main.c: 60:   _delay((unsigned long)((2)*(4000000/4000.0)));
   360     0765  3028               	movlw	40
   361     0766  120A  118A  27CD  120A  118A  	fcall	_LCD_Cmd
   362                           
   363                           ;main.c: 61:   GO_nDONE = 1;
   364     076B  300C               	movlw	12
   365     076C  120A  118A  27CD  120A  118A  	fcall	_LCD_Cmd
   366                           
   367                           ;main.c: 62:   while(GO_nDONE);
   368     0771  3006               	movlw	6
   369     0772  120A  118A  27CD  120A  118A  	fcall	_LCD_Cmd
   370                           
   371                           ;main.c: 63:   return ((ADRESH<<8)+ADRESL);
   372     0777  3001               	movlw	1
   373     0778  120A  118A  27CD  120A  118A  	fcall	_LCD_Cmd
   374     077D                     l37:
   375     077D  0008               	return
   376     077E                     __end_of_LCD_Init:
   377                           
   378                           	psect	text2
   379     07CD                     __ptext2:	
   380 ;; *************** function _LCD_Cmd *****************
   381 ;; Defined at:
   382 ;;		line 28 in file "main.c"
   383 ;; Parameters:    Size  Location     Type
   384 ;;  data            1    wreg     unsigned char 
   385 ;; Auto vars:     Size  Location     Type
   386 ;;  data            1    2[COMMON] unsigned char 
   387 ;; Return value:  Size  Location     Type
   388 ;;                  1    wreg      void 
   389 ;; Registers used:
   390 ;;		wreg, status,2, status,0
   391 ;; Tracked objects:
   392 ;;		On entry : 0/0
   393 ;;		On exit  : 0/0
   394 ;;		Unchanged: 0/0
   395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   396 ;;      Params:         0       0       0       0       0
   397 ;;      Locals:         1       0       0       0       0
   398 ;;      Temps:          2       0       0       0       0
   399 ;;      Totals:         3       0       0       0       0
   400 ;;Total ram usage:        3 bytes
   401 ;; Hardware stack levels used: 1
   402 ;; This function calls:
   403 ;;		Nothing
   404 ;; This function is called by:
   405 ;;		_LCD_Init
   406 ;; This function uses a non-reentrant model
   407 ;;
   408                           
   409     07CD                     _LCD_Cmd:	
   410                           ;psect for function _LCD_Cmd
   411                           
   412                           
   413                           ;incstack = 0
   414                           ; Regs used in _LCD_Cmd: [wreg+status,2+status,0]
   415                           ;LCD_Cmd@data stored from wreg
   416     07CD  00F2               	movwf	LCD_Cmd@data
   417     07CE                     l604:
   418                           
   419                           ;main.c: 29:     PORTB = ((data << 4) & 0xF0);
   420     07CE  0872               	movf	LCD_Cmd@data,w
   421     07CF  39F0               	andlw	240
   422     07D0  1283               	bcf	3,5	;RP0=0, select bank0
   423     07D1  1303               	bcf	3,6	;RP1=0, select bank0
   424     07D2  0086               	movwf	6	;volatile
   425     07D3                     l606:
   426                           
   427                           ;main.c: 30:     PORTBbits.RB2 = 1;
   428     07D3  1506               	bsf	6,2	;volatile
   429     07D4                     l608:
   430                           
   431                           ;main.c: 31:     PORTBbits.RB1 = 0;
   432     07D4  1086               	bcf	6,1	;volatile
   433     07D5                     l610:
   434                           
   435                           ;main.c: 32:     PORTBbits.RB0 = 1;
   436     07D5  1006               	bcf	6,0	;volatile
   437     07D6                     l612:
   438                           
   439                           ;main.c: 33:     _delay((unsigned long)((5)*(4000000/4000.0)));
   440     07D6  3007               	movlw	7
   441     07D7  00F1               	movwf	??_LCD_Cmd+1
   442     07D8  307D               	movlw	125
   443     07D9  00F0               	movwf	??_LCD_Cmd
   444     07DA                     u87:
   445     07DA  0BF0               	decfsz	??_LCD_Cmd,f
   446     07DB  2FDA               	goto	u87
   447     07DC  0BF1               	decfsz	??_LCD_Cmd+1,f
   448     07DD  2FDA               	goto	u87
   449     07DE                     l614:
   450                           
   451                           ;main.c: 34:     PORTBbits.RB2 = 0;
   452     07DE  1283               	bcf	3,5	;RP0=0, select bank0
   453     07DF  1303               	bcf	3,6	;RP1=0, select bank0
   454     07E0  1106               	bcf	6,2	;volatile
   455     07E1                     l616:
   456                           
   457                           ;main.c: 35: }
   458     07E1  0872               	movf	LCD_Cmd@data,w
   459     07E2  00F0               	movwf	??_LCD_Cmd
   460     07E3  3003               	movlw	3
   461     07E4                     u15:
   462     07E4  1003               	clrc
   463     07E5  0DF0               	rlf	??_LCD_Cmd,f
   464     07E6  3EFF               	addlw	-1
   465     07E7  1D03               	skipz
   466     07E8  2FE4               	goto	u15
   467     07E9  1003               	clrc
   468     07EA  0D70               	rlf	??_LCD_Cmd,w
   469     07EB  39F0               	andlw	240
   470     07EC  0086               	movwf	6	;volatile
   471     07ED                     l618:
   472                           
   473                           ;main.c: 36: 
   474     07ED  1506               	bsf	6,2	;volatile
   475     07EE                     l620:
   476                           
   477                           ;main.c: 37: void LCD_Init(){
   478     07EE  1086               	bcf	6,1	;volatile
   479     07EF                     l622:
   480                           
   481                           ;main.c: 38:     LCD_Cmd(0x02);
   482     07EF  1006               	bcf	6,0	;volatile
   483     07F0                     l624:
   484                           
   485                           ;main.c: 39:     LCD_Cmd(0x28);
   486     07F0  3007               	movlw	7
   487     07F1  00F1               	movwf	??_LCD_Cmd+1
   488     07F2  307D               	movlw	125
   489     07F3  00F0               	movwf	??_LCD_Cmd
   490     07F4                     u97:
   491     07F4  0BF0               	decfsz	??_LCD_Cmd,f
   492     07F5  2FF4               	goto	u97
   493     07F6  0BF1               	decfsz	??_LCD_Cmd+1,f
   494     07F7  2FF4               	goto	u97
   495     07F8                     l626:
   496                           
   497                           ;main.c: 40:     LCD_Cmd(0x0C);
   498     07F8  1283               	bcf	3,5	;RP0=0, select bank0
   499     07F9  1303               	bcf	3,6	;RP1=0, select bank0
   500     07FA  1106               	bcf	6,2	;volatile
   501     07FB                     l31:
   502     07FB  0008               	return
   503     07FC                     __end_of_LCD_Cmd:
   504                           
   505                           	psect	text3
   506     07A2                     __ptext3:	
   507 ;; *************** function _ADC_Read *****************
   508 ;; Defined at:
   509 ;;		line 78 in file "main.c"
   510 ;; Parameters:    Size  Location     Type
   511 ;;  channel         1    wreg     unsigned char 
   512 ;; Auto vars:     Size  Location     Type
   513 ;;  channel         1    4[COMMON] unsigned char 
   514 ;; Return value:  Size  Location     Type
   515 ;;                  2    0[COMMON] int 
   516 ;; Registers used:
   517 ;;		wreg, status,2, status,0, btemp+1
   518 ;; Tracked objects:
   519 ;;		On entry : 0/0
   520 ;;		On exit  : 0/0
   521 ;;		Unchanged: 0/0
   522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   523 ;;      Params:         2       0       0       0       0
   524 ;;      Locals:         1       0       0       0       0
   525 ;;      Temps:          2       0       0       0       0
   526 ;;      Totals:         5       0       0       0       0
   527 ;;Total ram usage:        5 bytes
   528 ;; Hardware stack levels used: 1
   529 ;; This function calls:
   530 ;;		Nothing
   531 ;; This function is called by:
   532 ;;		_main
   533 ;; This function uses a non-reentrant model
   534 ;;
   535                           
   536     07A2                     _ADC_Read:	
   537                           ;psect for function _ADC_Read
   538                           
   539                           
   540                           ;incstack = 0
   541                           ; Regs used in _ADC_Read: [wreg+status,2+status,0+btemp+1]
   542                           ;ADC_Read@channel stored from wreg
   543     07A2  00F4               	movwf	ADC_Read@channel
   544     07A3                     l688:
   545                           
   546                           ;main.c: 79:     }
   547     07A3  3001               	movlw	1
   548     07A4  00FF               	movwf	btemp+1
   549     07A5  087F               	movf	btemp+1,w
   550     07A6  1283               	bcf	3,5	;RP0=0, select bank0
   551     07A7  1303               	bcf	3,6	;RP1=0, select bank0
   552     07A8  059F               	andwf	31,f	;volatile
   553                           
   554                           ;main.c: 80:     return;
   555     07A9  0874               	movf	ADC_Read@channel,w	;volatile
   556     07AA  00F2               	movwf	??_ADC_Read
   557     07AB  3002               	movlw	2
   558     07AC                     u65:
   559     07AC  1003               	clrc
   560     07AD  0DF2               	rlf	??_ADC_Read,f
   561     07AE  3EFF               	addlw	-1
   562     07AF  1D03               	skipz
   563     07B0  2FAC               	goto	u65
   564     07B1  1003               	clrc
   565     07B2  0D72               	rlf	??_ADC_Read,w
   566     07B3  00FF               	movwf	btemp+1
   567     07B4  087F               	movf	btemp+1,w
   568     07B5  049F               	iorwf	31,f	;volatile
   569     07B6                     l690:
   570                           
   571                           ;main.c: 81: }
   572     07B6  3003               	movlw	3
   573     07B7  00F3               	movwf	??_ADC_Read+1
   574     07B8  3097               	movlw	151
   575     07B9  00F2               	movwf	??_ADC_Read
   576     07BA                     u107:
   577     07BA  0BF2               	decfsz	??_ADC_Read,f
   578     07BB  2FBA               	goto	u107
   579     07BC  0BF3               	decfsz	??_ADC_Read+1,f
   580     07BD  2FBA               	goto	u107
   581     07BE  2FBF               	nop2
   582     07BF                     l692:
   583     07BF  1283               	bcf	3,5	;RP0=0, select bank0
   584     07C0  1303               	bcf	3,6	;RP1=0, select bank0
   585     07C1  151F               	bsf	31,2	;volatile
   586     07C2                     l49:
   587     07C2  191F               	btfsc	31,2	;volatile
   588     07C3  2FC5               	goto	u71
   589     07C4  2FC6               	goto	u70
   590     07C5                     u71:
   591     07C5  2FC2               	goto	l49
   592     07C6                     u70:
   593     07C6                     l694:
   594     07C6  081E               	movf	30,w	;volatile
   595     07C7  00F1               	movwf	?_ADC_Read+1
   596     07C8  1683               	bsf	3,5	;RP0=1, select bank1
   597     07C9  1303               	bcf	3,6	;RP1=0, select bank1
   598     07CA  081E               	movf	30,w	;volatile
   599     07CB  00F0               	movwf	?_ADC_Read
   600     07CC                     l52:
   601     07CC  0008               	return
   602     07CD                     __end_of_ADC_Read:
   603                           
   604                           	psect	text4
   605     0756                     __ptext4:	
   606 ;; *************** function _ADC_Init *****************
   607 ;; Defined at:
   608 ;;		line 73 in file "main.c"
   609 ;; Parameters:    Size  Location     Type
   610 ;;		None
   611 ;; Auto vars:     Size  Location     Type
   612 ;;		None
   613 ;; Return value:  Size  Location     Type
   614 ;;                  1    wreg      void 
   615 ;; Registers used:
   616 ;;		wreg
   617 ;; Tracked objects:
   618 ;;		On entry : 0/0
   619 ;;		On exit  : 0/0
   620 ;;		Unchanged: 0/0
   621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   622 ;;      Params:         0       0       0       0       0
   623 ;;      Locals:         0       0       0       0       0
   624 ;;      Temps:          0       0       0       0       0
   625 ;;      Totals:         0       0       0       0       0
   626 ;;Total ram usage:        0 bytes
   627 ;; Hardware stack levels used: 1
   628 ;; This function calls:
   629 ;;		Nothing
   630 ;; This function is called by:
   631 ;;		_main
   632 ;; This function uses a non-reentrant model
   633 ;;
   634                           
   635     0756                     _ADC_Init:	
   636                           ;psect for function _ADC_Init
   637                           
   638     0756                     l654:	
   639                           ;incstack = 0
   640                           ; Regs used in _ADC_Init: [wreg]
   641                           
   642                           
   643                           ;main.c: 74:     float dienap;
   644     0756  3041               	movlw	65
   645     0757  1283               	bcf	3,5	;RP0=0, select bank0
   646     0758  1303               	bcf	3,6	;RP1=0, select bank0
   647     0759  009F               	movwf	31	;volatile
   648                           
   649                           ;main.c: 75:     while(1){
   650     075A  30C0               	movlw	192
   651     075B  1683               	bsf	3,5	;RP0=1, select bank1
   652     075C  1303               	bcf	3,6	;RP1=0, select bank1
   653     075D  009F               	movwf	31	;volatile
   654     075E                     l46:
   655     075E  0008               	return
   656     075F                     __end_of_ADC_Init:
   657     007E                     btemp	set	126	;btemp
   658     007E                     wtemp0	set	126
   659                           
   660                           	psect	config
   661                           
   662                           ;Config register CONFIG @ 0x2007
   663                           ;	Oscillator Selection bits
   664                           ;	FOSC = HS, HS oscillator
   665                           ;	Watchdog Timer Enable bit
   666                           ;	WDTE = ON, WDT enabled
   667                           ;	Power-up Timer Enable bit
   668                           ;	PWRTE = ON, PWRT enabled
   669                           ;	Brown-out Reset Enable bit
   670                           ;	BOREN = OFF, BOR disabled
   671                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   672                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   673                           ;	Data EEPROM Memory Code Protection bit
   674                           ;	CPD = OFF, Data EEPROM code protection off
   675                           ;	Flash Program Memory Write Enable bits
   676                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   677                           ;	In-Circuit Debugger Mode bit
   678                           ;	DEBUG = 0x1, unprogrammed default
   679                           ;	Flash Program Memory Code Protection bit
   680                           ;	CP = OFF, Code protection off
   681     2007                     	org	8199
   682     2007  3F36               	dw	16182

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       7
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_ADC_Read
    _LCD_Init->_LCD_Cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0      97
                                              5 COMMON     2     2      0
                           _ADC_Init
                           _ADC_Read
                           _LCD_Init
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             0     0      0      30
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_Cmd                                              3     3      0      30
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             5     3      2      22
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read
   _LCD_Init
     _LCD_Cmd

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       7       1       50.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Mon Dec 18 17:17:56 2023

                     l31 07FB                       l52 07CC                       l37 077D  
                     l46 075E                       l49 07C2                       u15 07E4  
                     u70 07C6                       u71 07C5                       u65 07AC  
                     u87 07DA                       u97 07F4                      l610 07D5  
                    l620 07EE                      l612 07D6                      l604 07CE  
                    l700 0781                      l622 07EF                      l614 07DE  
                    l606 07D3                      l710 079C                      l702 0784  
                    l624 07F0                      l616 07E1                      l608 07D4  
                    l704 0789                      l626 07F8                      l618 07ED  
                    l706 078E                      l652 075F                      l708 0798  
                    l654 0756                      l690 07B6                      l692 07BF  
                    l694 07C6                      l688 07A3                      l698 077E  
                    u107 07BA              LCD_Cmd@data 0072          __end_of_LCD_Cmd 07FC  
                   _main 077E                     btemp 007E         __end_of_ADC_Init 075F  
       __end_of_ADC_Read 07CD                     start 0000         __end_of_LCD_Init 077E  
                  ?_main 0070                    _PORTB 0006                    _PORTC 0007  
                  _PORTD 0008                    _TRISB 0086                    _TRISC 0087  
                  _TRISD 0088                    status 0003                    wtemp0 007E  
        __initialization 07FC             __end_of_main 07A2                   ??_main 0075  
              ??_LCD_Cmd 0070                   _ADCON0 001F                   _ADCON1 009F  
                 _ADRESH 001E                   _ADRESL 009E                   _TRISA0 0428  
        ADC_Read@channel 0074                ?_ADC_Init 0070                ?_ADC_Read 0070  
__end_of__initialization 07FC                ?_LCD_Init 0070           __pcstackCOMMON 0070  
             ??_ADC_Init 0070               ??_ADC_Read 0072               ??_LCD_Init 0073  
             __pmaintext 077E                  _LCD_Cmd 07CD                  __ptext1 075F  
                __ptext2 07CD                  __ptext3 07A2                  __ptext4 0756  
                main@ADC 0075     end_of_initialization 07FC                _PORTBbits 0006  
    start_initialization 07FC                 ?_LCD_Cmd 0070                ___latbits 0002  
               _ADC_Init 0756                 _ADC_Read 07A2                 _LCD_Init 075F  
               _GO_nDONE 00FA  
