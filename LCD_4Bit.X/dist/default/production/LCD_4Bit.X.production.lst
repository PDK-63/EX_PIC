

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Mon Dec 18 15:32:41 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    13                           	dabs	1,0x7E,2
    14     0000                     
    15                           ; Generated 22/03/2023 GMT
    16                           ; 
    17                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution. Publication is not required when
    31                           ;        this file is used in an embedded application.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC16F877A Definitions
    47                           ; 
    48                           ; SFR Addresses
    49     0000                     	;# 
    50     0001                     	;# 
    51     0002                     	;# 
    52     0003                     	;# 
    53     0004                     	;# 
    54     0005                     	;# 
    55     0006                     	;# 
    56     0007                     	;# 
    57     0008                     	;# 
    58     0009                     	;# 
    59     000A                     	;# 
    60     000B                     	;# 
    61     000C                     	;# 
    62     000D                     	;# 
    63     000E                     	;# 
    64     000E                     	;# 
    65     000F                     	;# 
    66     0010                     	;# 
    67     0011                     	;# 
    68     0012                     	;# 
    69     0013                     	;# 
    70     0014                     	;# 
    71     0015                     	;# 
    72     0015                     	;# 
    73     0016                     	;# 
    74     0017                     	;# 
    75     0018                     	;# 
    76     0019                     	;# 
    77     001A                     	;# 
    78     001B                     	;# 
    79     001B                     	;# 
    80     001C                     	;# 
    81     001D                     	;# 
    82     001E                     	;# 
    83     001F                     	;# 
    84     0081                     	;# 
    85     0085                     	;# 
    86     0086                     	;# 
    87     0087                     	;# 
    88     0088                     	;# 
    89     0089                     	;# 
    90     008C                     	;# 
    91     008D                     	;# 
    92     008E                     	;# 
    93     0091                     	;# 
    94     0092                     	;# 
    95     0093                     	;# 
    96     0094                     	;# 
    97     0098                     	;# 
    98     0099                     	;# 
    99     009C                     	;# 
   100     009D                     	;# 
   101     009E                     	;# 
   102     009F                     	;# 
   103     010C                     	;# 
   104     010D                     	;# 
   105     010E                     	;# 
   106     010F                     	;# 
   107     018C                     	;# 
   108     018D                     	;# 
   109     0000                     	;# 
   110     0001                     	;# 
   111     0002                     	;# 
   112     0003                     	;# 
   113     0004                     	;# 
   114     0005                     	;# 
   115     0006                     	;# 
   116     0007                     	;# 
   117     0008                     	;# 
   118     0009                     	;# 
   119     000A                     	;# 
   120     000B                     	;# 
   121     000C                     	;# 
   122     000D                     	;# 
   123     000E                     	;# 
   124     000E                     	;# 
   125     000F                     	;# 
   126     0010                     	;# 
   127     0011                     	;# 
   128     0012                     	;# 
   129     0013                     	;# 
   130     0014                     	;# 
   131     0015                     	;# 
   132     0015                     	;# 
   133     0016                     	;# 
   134     0017                     	;# 
   135     0018                     	;# 
   136     0019                     	;# 
   137     001A                     	;# 
   138     001B                     	;# 
   139     001B                     	;# 
   140     001C                     	;# 
   141     001D                     	;# 
   142     001E                     	;# 
   143     001F                     	;# 
   144     0081                     	;# 
   145     0085                     	;# 
   146     0086                     	;# 
   147     0087                     	;# 
   148     0088                     	;# 
   149     0089                     	;# 
   150     008C                     	;# 
   151     008D                     	;# 
   152     008E                     	;# 
   153     0091                     	;# 
   154     0092                     	;# 
   155     0093                     	;# 
   156     0094                     	;# 
   157     0098                     	;# 
   158     0099                     	;# 
   159     009C                     	;# 
   160     009D                     	;# 
   161     009E                     	;# 
   162     009F                     	;# 
   163     010C                     	;# 
   164     010D                     	;# 
   165     010E                     	;# 
   166     010F                     	;# 
   167     018C                     	;# 
   168     018D                     	;# 
   169     0006                     _PORTBbits	set	6
   170     0006                     _PORTB	set	6
   171     0086                     _TRISB	set	134
   172                           
   173                           	psect	strings
   174     0003                     __pstrings:
   175     0003                     stringtab:
   176     0003                     __stringtab:
   177     0003                     stringcode:	
   178                           ;	String table - string pointers are 1 byte each
   179                           
   180     0003                     stringdir:
   181     0003  3000               	movlw	high stringdir
   182     0004  008A               	movwf	10
   183     0005  0804               	movf	4,w
   184     0006  0A84               	incf	4,f
   185     0007  0782               	addwf	2,f
   186     0008                     __stringbase:
   187     0008  3400               	retlw	0
   188     0009                     __end_of__stringtab:
   189     0009                     STR_1:
   190     0009  3458               	retlw	88	;'X'
   191     000A  3469               	retlw	105	;'i'
   192     000B  346E               	retlw	110	;'n'
   193     000C  3420               	retlw	32	;' '
   194     000D  3463               	retlw	99	;'c'
   195     000E  3468               	retlw	104	;'h'
   196     000F  3461               	retlw	97	;'a'
   197     0010  346F               	retlw	111	;'o'
   198     0011  3400               	retlw	0
   199     0012                     STR_2:
   200     0012  3431               	retlw	49	;'1'
   201     0013  3432               	retlw	50	;'2'
   202     0014  3433               	retlw	51	;'3'
   203     0015  3434               	retlw	52	;'4'
   204     0016  3435               	retlw	53	;'5'
   205     0017  3438               	retlw	56	;'8'
   206     0018  3437               	retlw	55	;'7'
   207     0019  3400               	retlw	0
   208                           
   209                           	psect	cinit
   210     07FC                     start_initialization:	
   211                           ; #config settings
   212                           
   213     07FC                     __initialization:
   214     07FC                     end_of_initialization:	
   215                           ;End of C runtime variable initialization code
   216                           
   217     07FC                     __end_of__initialization:
   218     07FC  0183               	clrf	3
   219     07FD  120A  118A  2F72   	ljmp	_main	;jump to C main() function
   220                           
   221                           	psect	cstackCOMMON
   222     0070                     __pcstackCOMMON:
   223     0070                     ?_LCD_Cmd:
   224     0070                     ??_LCD_Cmd:	
   225                           ; 1 bytes @ 0x0
   226                           
   227     0070                     ?_LCD_Data:	
   228                           ; 1 bytes @ 0x0
   229                           
   230     0070                     ??_LCD_Data:	
   231                           ; 1 bytes @ 0x0
   232                           
   233     0070                     ?_LCD_Init:	
   234                           ; 1 bytes @ 0x0
   235                           
   236     0070                     ?_main:	
   237                           ; 1 bytes @ 0x0
   238                           
   239                           
   240                           ; 1 bytes @ 0x0
   241     0070                     	ds	2
   242     0072                     LCD_Cmd@data:
   243     0072                     LCD_Data@data:	
   244                           ; 1 bytes @ 0x2
   245                           
   246                           
   247                           ; 1 bytes @ 0x2
   248     0072                     	ds	1
   249     0073                     ??_LCD_Init:
   250     0073                     ?_LCD_String:	
   251                           ; 1 bytes @ 0x3
   252                           
   253     0073                     LCD_String@num:	
   254                           ; 1 bytes @ 0x3
   255                           
   256                           
   257                           ; 1 bytes @ 0x3
   258     0073                     	ds	1
   259     0074                     ??_LCD_String:
   260     0074                     LCD_String@str:	
   261                           ; 1 bytes @ 0x4
   262                           
   263                           
   264                           ; 1 bytes @ 0x4
   265     0074                     	ds	1
   266     0075                     LCD_String@i:
   267                           
   268                           ; 1 bytes @ 0x5
   269     0075                     	ds	1
   270     0076                     ??_main:
   271                           
   272                           	psect	maintext
   273     0772                     __pmaintext:	
   274                           ; 1 bytes @ 0x6
   275 ;;
   276 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   277 ;;
   278 ;; *************** function _main *****************
   279 ;; Defined at:
   280 ;;		line 71 in file "main.c"
   281 ;; Parameters:    Size  Location     Type
   282 ;;		None
   283 ;; Auto vars:     Size  Location     Type
   284 ;;		None
   285 ;; Return value:  Size  Location     Type
   286 ;;                  1    wreg      void 
   287 ;; Registers used:
   288 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   289 ;; Tracked objects:
   290 ;;		On entry : B00/0
   291 ;;		On exit  : 0/0
   292 ;;		Unchanged: 0/0
   293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   294 ;;      Params:         0       0       0       0       0
   295 ;;      Locals:         0       0       0       0       0
   296 ;;      Temps:          0       0       0       0       0
   297 ;;      Totals:         0       0       0       0       0
   298 ;;Total ram usage:        0 bytes
   299 ;; Hardware stack levels required when called: 2
   300 ;; This function calls:
   301 ;;		_LCD_Cmd
   302 ;;		_LCD_Init
   303 ;;		_LCD_String
   304 ;; This function is called by:
   305 ;;		Startup code after reset
   306 ;; This function uses a non-reentrant model
   307 ;;
   308                           
   309     0772                     _main:	
   310                           ;psect for function _main
   311                           
   312     0772                     l653:	
   313                           ;incstack = 0
   314                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   315                           
   316     0772  1683               	bsf	3,5	;RP0=1, select bank1
   317     0773  1303               	bcf	3,6	;RP1=0, select bank1
   318     0774  0186               	clrf	6	;volatile
   319     0775                     l655:
   320     0775  120A  118A  2753  120A  118A  	fcall	_LCD_Init
   321     077A                     l657:
   322     077A  3080               	movlw	128
   323     077B  120A  118A  279A  120A  118A  	fcall	_LCD_Cmd
   324     0780                     l659:
   325     0780  3008               	movlw	8
   326     0781  00F3               	movwf	LCD_String@num
   327     0782  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   328     0783  120A  118A  2738  120A  118A  	fcall	_LCD_String
   329     0788                     l661:
   330     0788  30C0               	movlw	192
   331     0789  120A  118A  279A  120A  118A  	fcall	_LCD_Cmd
   332     078E                     l663:
   333     078E  3007               	movlw	7
   334     078F  00F3               	movwf	LCD_String@num
   335     0790  300A               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   336     0791  120A  118A  2738  120A  118A  	fcall	_LCD_String
   337     0796  2F7A               	goto	l657
   338     0797  120A  118A  2800   	ljmp	start
   339     079A                     __end_of_main:
   340                           
   341                           	psect	text1
   342     0738                     __ptext1:	
   343 ;; *************** function _LCD_String *****************
   344 ;; Defined at:
   345 ;;		line 65 in file "main.c"
   346 ;; Parameters:    Size  Location     Type
   347 ;;  str             1    wreg     PTR unsigned char 
   348 ;;		 -> STR_2(8), STR_1(9), 
   349 ;;  num             1    3[COMMON] unsigned char 
   350 ;; Auto vars:     Size  Location     Type
   351 ;;  str             1    4[COMMON] PTR unsigned char 
   352 ;;		 -> STR_2(8), STR_1(9), 
   353 ;;  i               1    5[COMMON] unsigned char 
   354 ;; Return value:  Size  Location     Type
   355 ;;                  1    wreg      void 
   356 ;; Registers used:
   357 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   358 ;; Tracked objects:
   359 ;;		On entry : 0/0
   360 ;;		On exit  : 0/0
   361 ;;		Unchanged: 0/0
   362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   363 ;;      Params:         1       0       0       0       0
   364 ;;      Locals:         2       0       0       0       0
   365 ;;      Temps:          0       0       0       0       0
   366 ;;      Totals:         3       0       0       0       0
   367 ;;Total ram usage:        3 bytes
   368 ;; Hardware stack levels used: 1
   369 ;; Hardware stack levels required when called: 1
   370 ;; This function calls:
   371 ;;		_LCD_Data
   372 ;; This function is called by:
   373 ;;		_main
   374 ;; This function uses a non-reentrant model
   375 ;;
   376                           
   377     0738                     _LCD_String:	
   378                           ;psect for function _LCD_String
   379                           
   380                           
   381                           ;incstack = 0
   382                           ; Regs used in _LCD_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   383                           ;LCD_String@str stored from wreg
   384     0738  00F4               	movwf	LCD_String@str
   385     0739                     l645:
   386     0739  01F5               	clrf	LCD_String@i
   387     073A  2F4C               	goto	l651
   388     073B                     l647:
   389     073B  0875               	movf	LCD_String@i,w
   390     073C  0774               	addwf	LCD_String@str,w
   391     073D  0084               	movwf	4
   392     073E  120A  118A  2003  120A  118A  	fcall	stringdir
   393     0743  120A  118A  27CB  120A  118A  	fcall	_LCD_Data
   394     0748                     l649:
   395     0748  3001               	movlw	1
   396     0749  00FF               	movwf	btemp+1
   397     074A  087F               	movf	btemp+1,w
   398     074B  07F5               	addwf	LCD_String@i,f
   399     074C                     l651:
   400     074C  0873               	movf	LCD_String@num,w
   401     074D  0275               	subwf	LCD_String@i,w
   402     074E  1C03               	skipc
   403     074F  2F51               	goto	u41
   404     0750  2F52               	goto	u40
   405     0751                     u41:
   406     0751  2F3B               	goto	l647
   407     0752                     u40:
   408     0752                     l23:
   409     0752  0008               	return
   410     0753                     __end_of_LCD_String:
   411                           
   412                           	psect	text2
   413     07CB                     __ptext2:	
   414 ;; *************** function _LCD_Data *****************
   415 ;; Defined at:
   416 ;;		line 42 in file "main.c"
   417 ;; Parameters:    Size  Location     Type
   418 ;;  data            1    wreg     unsigned char 
   419 ;; Auto vars:     Size  Location     Type
   420 ;;  data            1    2[COMMON] unsigned char 
   421 ;; Return value:  Size  Location     Type
   422 ;;                  1    wreg      void 
   423 ;; Registers used:
   424 ;;		wreg, status,2, status,0
   425 ;; Tracked objects:
   426 ;;		On entry : 0/0
   427 ;;		On exit  : 0/0
   428 ;;		Unchanged: 0/0
   429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   430 ;;      Params:         0       0       0       0       0
   431 ;;      Locals:         1       0       0       0       0
   432 ;;      Temps:          2       0       0       0       0
   433 ;;      Totals:         3       0       0       0       0
   434 ;;Total ram usage:        3 bytes
   435 ;; Hardware stack levels used: 1
   436 ;; This function calls:
   437 ;;		Nothing
   438 ;; This function is called by:
   439 ;;		_LCD_String
   440 ;; This function uses a non-reentrant model
   441 ;;
   442                           
   443     07CB                     _LCD_Data:	
   444                           ;psect for function _LCD_Data
   445                           
   446                           
   447                           ;incstack = 0
   448                           ; Regs used in _LCD_Data: [wreg+status,2+status,0]
   449                           ;LCD_Data@data stored from wreg
   450     07CB  00F2               	movwf	LCD_Data@data
   451     07CC                     l599:
   452                           
   453                           ;main.c: 43: }
   454     07CC  0872               	movf	LCD_Data@data,w
   455     07CD  39F0               	andlw	240
   456     07CE  1283               	bcf	3,5	;RP0=0, select bank0
   457     07CF  1303               	bcf	3,6	;RP1=0, select bank0
   458     07D0  0086               	movwf	6	;volatile
   459     07D1                     l601:
   460                           
   461                           ;main.c: 44: 
   462     07D1  1506               	bsf	6,2	;volatile
   463     07D2                     l603:
   464                           
   465                           ;main.c: 45: void LCD_String(char *str, char num){
   466     07D2  1086               	bcf	6,1	;volatile
   467     07D3                     l605:
   468                           
   469                           ;main.c: 46:     unsigned char i;
   470     07D3  1406               	bsf	6,0	;volatile
   471     07D4                     l607:
   472                           
   473                           ;main.c: 47:     for(i = 0; i < num; i++){
   474     07D4  3021               	movlw	33
   475     07D5  00F1               	movwf	??_LCD_Data+1
   476     07D6  3076               	movlw	118
   477     07D7  00F0               	movwf	??_LCD_Data
   478     07D8                     u57:
   479     07D8  0BF0               	decfsz	??_LCD_Data,f
   480     07D9  2FD8               	goto	u57
   481     07DA  0BF1               	decfsz	??_LCD_Data+1,f
   482     07DB  2FD8               	goto	u57
   483     07DC  0000               	nop
   484     07DD                     l609:
   485                           
   486                           ;main.c: 48:         LCD_Data(str[i]);
   487     07DD  1283               	bcf	3,5	;RP0=0, select bank0
   488     07DE  1303               	bcf	3,6	;RP1=0, select bank0
   489     07DF  1106               	bcf	6,2	;volatile
   490     07E0                     l611:
   491                           
   492                           ;main.c: 49:     }
   493     07E0  0872               	movf	LCD_Data@data,w
   494     07E1  00F0               	movwf	??_LCD_Data
   495     07E2  3003               	movlw	3
   496     07E3                     u25:
   497     07E3  1003               	clrc
   498     07E4  0DF0               	rlf	??_LCD_Data,f
   499     07E5  3EFF               	addlw	-1
   500     07E6  1D03               	skipz
   501     07E7  2FE3               	goto	u25
   502     07E8  1003               	clrc
   503     07E9  0D70               	rlf	??_LCD_Data,w
   504     07EA  39F0               	andlw	240
   505     07EB  0086               	movwf	6	;volatile
   506     07EC                     l613:
   507                           
   508                           ;main.c: 50: }
   509     07EC  1506               	bsf	6,2	;volatile
   510     07ED                     l615:
   511                           
   512                           ;main.c: 51: void main(void) {
   513     07ED  1086               	bcf	6,1	;volatile
   514     07EE                     l617:
   515                           
   516                           ;main.c: 52:     TRISB = 0x00;
   517     07EE  1406               	bsf	6,0	;volatile
   518     07EF                     l619:
   519                           
   520                           ;main.c: 53:     LCD_Init();
   521     07EF  3021               	movlw	33
   522     07F0  00F1               	movwf	??_LCD_Data+1
   523     07F1  3076               	movlw	118
   524     07F2  00F0               	movwf	??_LCD_Data
   525     07F3                     u67:
   526     07F3  0BF0               	decfsz	??_LCD_Data,f
   527     07F4  2FF3               	goto	u67
   528     07F5  0BF1               	decfsz	??_LCD_Data+1,f
   529     07F6  2FF3               	goto	u67
   530     07F7  0000               	nop
   531     07F8                     l621:
   532                           
   533                           ;main.c: 54:     while(1){
   534     07F8  1283               	bcf	3,5	;RP0=0, select bank0
   535     07F9  1303               	bcf	3,6	;RP1=0, select bank0
   536     07FA  1106               	bcf	6,2	;volatile
   537     07FB                     l14:
   538     07FB  0008               	return
   539     07FC                     __end_of_LCD_Data:
   540                           
   541                           	psect	text3
   542     0753                     __ptext3:	
   543 ;; *************** function _LCD_Init *****************
   544 ;; Defined at:
   545 ;;		line 57 in file "main.c"
   546 ;; Parameters:    Size  Location     Type
   547 ;;		None
   548 ;; Auto vars:     Size  Location     Type
   549 ;;		None
   550 ;; Return value:  Size  Location     Type
   551 ;;                  1    wreg      void 
   552 ;; Registers used:
   553 ;;		wreg, status,2, status,0, pclath, cstack
   554 ;; Tracked objects:
   555 ;;		On entry : 0/0
   556 ;;		On exit  : 0/0
   557 ;;		Unchanged: 0/0
   558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   559 ;;      Params:         0       0       0       0       0
   560 ;;      Locals:         0       0       0       0       0
   561 ;;      Temps:          0       0       0       0       0
   562 ;;      Totals:         0       0       0       0       0
   563 ;;Total ram usage:        0 bytes
   564 ;; Hardware stack levels used: 1
   565 ;; Hardware stack levels required when called: 1
   566 ;; This function calls:
   567 ;;		_LCD_Cmd
   568 ;; This function is called by:
   569 ;;		_main
   570 ;; This function uses a non-reentrant model
   571 ;;
   572                           
   573     0753                     _LCD_Init:	
   574                           ;psect for function _LCD_Init
   575                           
   576     0753                     l623:	
   577                           ;incstack = 0
   578                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
   579                           
   580                           
   581                           ;main.c: 58:         LCD_String("1234587", 7);
   582     0753  3002               	movlw	2
   583     0754  120A  118A  279A  120A  118A  	fcall	_LCD_Cmd
   584                           
   585                           ;main.c: 59:     }
   586     0759  3028               	movlw	40
   587     075A  120A  118A  279A  120A  118A  	fcall	_LCD_Cmd
   588                           
   589                           ;main.c: 60:     return;
   590     075F  300C               	movlw	12
   591     0760  120A  118A  279A  120A  118A  	fcall	_LCD_Cmd
   592                           
   593                           ;main.c: 61: }
   594     0765  3006               	movlw	6
   595     0766  120A  118A  279A  120A  118A  	fcall	_LCD_Cmd
   596     076B  3001               	movlw	1
   597     076C  120A  118A  279A  120A  118A  	fcall	_LCD_Cmd
   598     0771                     l17:
   599     0771  0008               	return
   600     0772                     __end_of_LCD_Init:
   601                           
   602                           	psect	text4
   603     079A                     __ptext4:	
   604 ;; *************** function _LCD_Cmd *****************
   605 ;; Defined at:
   606 ;;		line 27 in file "main.c"
   607 ;; Parameters:    Size  Location     Type
   608 ;;  data            1    wreg     unsigned char 
   609 ;; Auto vars:     Size  Location     Type
   610 ;;  data            1    2[COMMON] unsigned char 
   611 ;; Return value:  Size  Location     Type
   612 ;;                  1    wreg      void 
   613 ;; Registers used:
   614 ;;		wreg, status,2, status,0
   615 ;; Tracked objects:
   616 ;;		On entry : 0/0
   617 ;;		On exit  : 0/0
   618 ;;		Unchanged: 0/0
   619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   620 ;;      Params:         0       0       0       0       0
   621 ;;      Locals:         1       0       0       0       0
   622 ;;      Temps:          2       0       0       0       0
   623 ;;      Totals:         3       0       0       0       0
   624 ;;Total ram usage:        3 bytes
   625 ;; Hardware stack levels used: 1
   626 ;; This function calls:
   627 ;;		Nothing
   628 ;; This function is called by:
   629 ;;		_LCD_Init
   630 ;;		_main
   631 ;; This function uses a non-reentrant model
   632 ;;
   633                           
   634     079A                     _LCD_Cmd:	
   635                           ;psect for function _LCD_Cmd
   636                           
   637                           
   638                           ;incstack = 0
   639                           ; Regs used in _LCD_Cmd: [wreg+status,2+status,0]
   640                           ;LCD_Cmd@data stored from wreg
   641     079A  00F2               	movwf	LCD_Cmd@data
   642     079B                     l575:
   643                           
   644                           ;main.c: 28:     PORTBbits.RB2 = 0;
   645     079B  0872               	movf	LCD_Cmd@data,w
   646     079C  39F0               	andlw	240
   647     079D  1283               	bcf	3,5	;RP0=0, select bank0
   648     079E  1303               	bcf	3,6	;RP1=0, select bank0
   649     079F  0086               	movwf	6	;volatile
   650     07A0                     l577:
   651                           
   652                           ;main.c: 29:     PORTB = ((data << 4) & 0xF0);
   653     07A0  1506               	bsf	6,2	;volatile
   654     07A1                     l579:
   655                           
   656                           ;main.c: 30:     PORTBbits.RB2 = 1;
   657     07A1  1086               	bcf	6,1	;volatile
   658     07A2                     l581:
   659                           
   660                           ;main.c: 31:     PORTBbits.RB1 = 0;
   661     07A2  1006               	bcf	6,0	;volatile
   662     07A3                     l583:
   663                           
   664                           ;main.c: 32:     PORTBbits.RB0 = 1;
   665     07A3  3021               	movlw	33
   666     07A4  00F1               	movwf	??_LCD_Cmd+1
   667     07A5  3076               	movlw	118
   668     07A6  00F0               	movwf	??_LCD_Cmd
   669     07A7                     u77:
   670     07A7  0BF0               	decfsz	??_LCD_Cmd,f
   671     07A8  2FA7               	goto	u77
   672     07A9  0BF1               	decfsz	??_LCD_Cmd+1,f
   673     07AA  2FA7               	goto	u77
   674     07AB  0000               	nop
   675     07AC                     l585:
   676                           
   677                           ;main.c: 33:     _delay((unsigned long)((5)*(20000000/4000.0)));
   678     07AC  1283               	bcf	3,5	;RP0=0, select bank0
   679     07AD  1303               	bcf	3,6	;RP1=0, select bank0
   680     07AE  1106               	bcf	6,2	;volatile
   681     07AF                     l587:
   682                           
   683                           ;main.c: 34:     PORTBbits.RB2 = 0;
   684     07AF  0872               	movf	LCD_Cmd@data,w
   685     07B0  00F0               	movwf	??_LCD_Cmd
   686     07B1  3003               	movlw	3
   687     07B2                     u15:
   688     07B2  1003               	clrc
   689     07B3  0DF0               	rlf	??_LCD_Cmd,f
   690     07B4  3EFF               	addlw	-1
   691     07B5  1D03               	skipz
   692     07B6  2FB2               	goto	u15
   693     07B7  1003               	clrc
   694     07B8  0D70               	rlf	??_LCD_Cmd,w
   695     07B9  39F0               	andlw	240
   696     07BA  0086               	movwf	6	;volatile
   697     07BB                     l589:
   698                           
   699                           ;main.c: 35: }
   700     07BB  1506               	bsf	6,2	;volatile
   701     07BC                     l591:
   702                           
   703                           ;main.c: 36: 
   704     07BC  1086               	bcf	6,1	;volatile
   705     07BD                     l593:
   706                           
   707                           ;main.c: 37: void LCD_Init(){
   708     07BD  1006               	bcf	6,0	;volatile
   709     07BE                     l595:
   710                           
   711                           ;main.c: 38:     LCD_Cmd(0x02);
   712     07BE  3021               	movlw	33
   713     07BF  00F1               	movwf	??_LCD_Cmd+1
   714     07C0  3076               	movlw	118
   715     07C1  00F0               	movwf	??_LCD_Cmd
   716     07C2                     u87:
   717     07C2  0BF0               	decfsz	??_LCD_Cmd,f
   718     07C3  2FC2               	goto	u87
   719     07C4  0BF1               	decfsz	??_LCD_Cmd+1,f
   720     07C5  2FC2               	goto	u87
   721     07C6  0000               	nop
   722     07C7                     l597:
   723                           
   724                           ;main.c: 39:     LCD_Cmd(0x28);
   725     07C7  1283               	bcf	3,5	;RP0=0, select bank0
   726     07C8  1303               	bcf	3,6	;RP1=0, select bank0
   727     07C9  1106               	bcf	6,2	;volatile
   728     07CA                     l11:
   729     07CA  0008               	return
   730     07CB                     __end_of_LCD_Cmd:
   731     007E                     btemp	set	126	;btemp
   732     007E                     wtemp0	set	126
   733                           
   734                           	psect	config
   735                           
   736                           ;Config register CONFIG @ 0x2007
   737                           ;	Oscillator Selection bits
   738                           ;	FOSC = HS, HS oscillator
   739                           ;	Watchdog Timer Enable bit
   740                           ;	WDTE = ON, WDT enabled
   741                           ;	Power-up Timer Enable bit
   742                           ;	PWRTE = ON, PWRT enabled
   743                           ;	Brown-out Reset Enable bit
   744                           ;	BOREN = OFF, BOR disabled
   745                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   746                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   747                           ;	Data EEPROM Memory Code Protection bit
   748                           ;	CPD = OFF, Data EEPROM code protection off
   749                           ;	Flash Program Memory Write Enable bits
   750                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   751                           ;	In-Circuit Debugger Mode bit
   752                           ;	DEBUG = 0x1, unprogrammed default
   753                           ;	Flash Program Memory Code Protection bit
   754                           ;	CP = OFF, Code protection off
   755     2007                     	org	8199
   756     2007  3F36               	dw	16182

Data Sizes:
    Strings     17
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       6
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_String@str	PTR unsigned char  size(1) Largest target is 9
		 -> STR_1(CODE[9]), STR_2(CODE[8]), 


Critical Paths under _main in COMMON

    _main->_LCD_String
    _LCD_String->_LCD_Data
    _LCD_Init->_LCD_Cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     398
                            _LCD_Cmd
                           _LCD_Init
                         _LCD_String
 ---------------------------------------------------------------------------------
 (1) _LCD_String                                           3     2      1     338
                                              3 COMMON     3     2      1
                           _LCD_Data
 ---------------------------------------------------------------------------------
 (2) _LCD_Data                                             3     3      0      30
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             0     0      0      30
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_Cmd                                              3     3      0      30
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Cmd
   _LCD_Init
     _LCD_Cmd
   _LCD_String
     _LCD_Data

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       6       1       42.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Mon Dec 18 15:32:41 2023

                      pc 0002                       l11 07CA                       l14 07FB  
                     l23 0752                       l17 0771                       u15 07B2  
                     u40 0752                       u25 07E3                       u41 0751  
                     u57 07D8                       u67 07F3                       u77 07A7  
                     u87 07C2                       fsr 0004              ?_LCD_String 0073  
                    l601 07D1                      l611 07E0                      l603 07D2  
                    l621 07F8                      l613 07EC                      l605 07D3  
                    l623 0753                      l615 07ED                      l607 07D4  
                    l617 07EE                      l609 07DD                      l619 07EF  
                    l651 074C                      l581 07A2                      l645 0739  
                    l661 0788                      l653 0772                      l591 07BC  
                    l583 07A3                      l575 079B                      l647 073B  
                    l663 078E                      l655 0775                      l593 07BD  
                    l585 07AC                      l577 07A0                      l649 0748  
                    l657 077A                      l595 07BE                      l587 07AF  
                    l579 07A1                      l659 0780                      l597 07C7  
                    l589 07BB                      l599 07CC                      fsr0 0004  
            LCD_Cmd@data 0072          __end_of_LCD_Cmd 07CB                     STR_1 0009  
                   STR_2 0012                     _main 0772                     btemp 007E  
                   start 0000         __end_of_LCD_Data 07FC         __end_of_LCD_Init 0772  
           LCD_Data@data 0072                    ?_main 0070                    _PORTB 0006  
                  _TRISB 0086              LCD_String@i 0075                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 07FC  
           __end_of_main 079A                   ??_main 0076                ??_LCD_Cmd 0070  
              ?_LCD_Data 0070  __end_of__initialization 07FC                ?_LCD_Init 0070  
         __pcstackCOMMON 0070             ??_LCD_String 0074               ??_LCD_Data 0070  
             ??_LCD_Init 0073       __end_of_LCD_String 0753               __pmaintext 0772  
                _LCD_Cmd 079A               __stringtab 0003            LCD_String@num 0073  
          LCD_String@str 0074                  __ptext1 0738                  __ptext2 07CB  
                __ptext3 0753                  __ptext4 079A     end_of_initialization 07FC  
              _PORTBbits 0006      start_initialization 07FC                 ?_LCD_Cmd 0070  
              ___latbits 0002                __pstrings 0003                 _LCD_Data 07CB  
               _LCD_Init 0753              __stringbase 0008       __end_of__stringtab 0009  
             _LCD_String 0738                stringcode 0003                 stringdir 0003  
               stringtab 0003  
