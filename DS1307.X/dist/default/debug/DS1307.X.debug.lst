

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Tue Dec 19 02:54:23 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	text11,local,class=CODE,merge=1,delta=2
    20                           	psect	text12,local,class=CODE,merge=1,delta=2
    21                           	psect	text13,local,class=CODE,merge=1,delta=2
    22                           	psect	text14,local,class=CODE,merge=1,delta=2
    23                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    24                           	dabs	1,0x7E,2
    25     0000                     
    26                           ; Generated 22/03/2023 GMT
    27                           ; 
    28                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution. Publication is not required when
    42                           ;        this file is used in an embedded application.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC16F877A Definitions
    58                           ; 
    59                           ; SFR Addresses
    60     0000                     	;# 
    61     0001                     	;# 
    62     0002                     	;# 
    63     0003                     	;# 
    64     0004                     	;# 
    65     0005                     	;# 
    66     0006                     	;# 
    67     0007                     	;# 
    68     0008                     	;# 
    69     0009                     	;# 
    70     000A                     	;# 
    71     000B                     	;# 
    72     000C                     	;# 
    73     000D                     	;# 
    74     000E                     	;# 
    75     000E                     	;# 
    76     000F                     	;# 
    77     0010                     	;# 
    78     0011                     	;# 
    79     0012                     	;# 
    80     0013                     	;# 
    81     0014                     	;# 
    82     0015                     	;# 
    83     0015                     	;# 
    84     0016                     	;# 
    85     0017                     	;# 
    86     0018                     	;# 
    87     0019                     	;# 
    88     001A                     	;# 
    89     001B                     	;# 
    90     001B                     	;# 
    91     001C                     	;# 
    92     001D                     	;# 
    93     001E                     	;# 
    94     001F                     	;# 
    95     0081                     	;# 
    96     0085                     	;# 
    97     0086                     	;# 
    98     0087                     	;# 
    99     0088                     	;# 
   100     0089                     	;# 
   101     008C                     	;# 
   102     008D                     	;# 
   103     008E                     	;# 
   104     0091                     	;# 
   105     0092                     	;# 
   106     0093                     	;# 
   107     0094                     	;# 
   108     0098                     	;# 
   109     0099                     	;# 
   110     009C                     	;# 
   111     009D                     	;# 
   112     009E                     	;# 
   113     009F                     	;# 
   114     010C                     	;# 
   115     010D                     	;# 
   116     010E                     	;# 
   117     010F                     	;# 
   118     018C                     	;# 
   119     018D                     	;# 
   120     0000                     	;# 
   121     0001                     	;# 
   122     0002                     	;# 
   123     0003                     	;# 
   124     0004                     	;# 
   125     0005                     	;# 
   126     0006                     	;# 
   127     0007                     	;# 
   128     0008                     	;# 
   129     0009                     	;# 
   130     000A                     	;# 
   131     000B                     	;# 
   132     000C                     	;# 
   133     000D                     	;# 
   134     000E                     	;# 
   135     000E                     	;# 
   136     000F                     	;# 
   137     0010                     	;# 
   138     0011                     	;# 
   139     0012                     	;# 
   140     0013                     	;# 
   141     0014                     	;# 
   142     0015                     	;# 
   143     0015                     	;# 
   144     0016                     	;# 
   145     0017                     	;# 
   146     0018                     	;# 
   147     0019                     	;# 
   148     001A                     	;# 
   149     001B                     	;# 
   150     001B                     	;# 
   151     001C                     	;# 
   152     001D                     	;# 
   153     001E                     	;# 
   154     001F                     	;# 
   155     0081                     	;# 
   156     0085                     	;# 
   157     0086                     	;# 
   158     0087                     	;# 
   159     0088                     	;# 
   160     0089                     	;# 
   161     008C                     	;# 
   162     008D                     	;# 
   163     008E                     	;# 
   164     0091                     	;# 
   165     0092                     	;# 
   166     0093                     	;# 
   167     0094                     	;# 
   168     0098                     	;# 
   169     0099                     	;# 
   170     009C                     	;# 
   171     009D                     	;# 
   172     009E                     	;# 
   173     009F                     	;# 
   174     010C                     	;# 
   175     010D                     	;# 
   176     010E                     	;# 
   177     010F                     	;# 
   178     018C                     	;# 
   179     018D                     	;# 
   180     0013                     _SSPBUF	set	19
   181     0014                     _SSPCON	set	20
   182     0006                     _PORTBbits	set	6
   183     0006                     _PORTB	set	6
   184     0063                     _SSPIF	set	99
   185     0086                     _TRISB	set	134
   186     0093                     _SSPADD	set	147
   187     048C                     _ACKEN	set	1164
   188     048D                     _ACKDT	set	1165
   189     0489                     _RSEN	set	1161
   190     048A                     _PEN	set	1162
   191     0488                     _SEN	set	1160
   192     048B                     _RCEN	set	1163
   193     048E                     _ACKSTAT	set	1166
   194     043C                     _TRISC4	set	1084
   195     043B                     _TRISC3	set	1083
   196                           
   197                           	psect	strings
   198     0003                     __pstrings:
   199     0003                     stringtab:
   200     0003                     __stringtab:
   201     0003                     stringcode:	
   202                           ;	String table - string pointers are 1 byte each
   203                           
   204     0003                     stringdir:
   205     0003  3000               	movlw	high stringdir
   206     0004  008A               	movwf	10
   207     0005  0804               	movf	4,w
   208     0006  0A84               	incf	4,f
   209     0007  0782               	addwf	2,f
   210     0008                     __stringbase:
   211     0008  3400               	retlw	0
   212     0009                     __end_of__stringtab:
   213     0009                     STR_1:
   214     0009  3458               	retlw	88	;'X'
   215     000A  3469               	retlw	105	;'i'
   216     000B  346E               	retlw	110	;'n'
   217     000C  3420               	retlw	32	;' '
   218     000D  3463               	retlw	99	;'c'
   219     000E  3468               	retlw	104	;'h'
   220     000F  3461               	retlw	97	;'a'
   221     0010  346F               	retlw	111	;'o'
   222     0011  3400               	retlw	0
   223                           
   224                           	psect	cinit
   225     07F5                     start_initialization:	
   226                           ; #config settings
   227                           
   228     07F5                     __initialization:
   229                           
   230                           ; Clear objects allocated to COMMON
   231     07F5  01F0               	clrf	__pbssCOMMON& (0+127)
   232     07F6  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   233     07F7  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   234     07F8  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   235     07F9  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   236     07FA  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
   237     07FB  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
   238     07FC                     end_of_initialization:	
   239                           ;End of C runtime variable initialization code
   240                           
   241     07FC                     __end_of__initialization:
   242     07FC  0183               	clrf	3
   243     07FD  120A  118A  2EF9   	ljmp	_main	;jump to C main() function
   244                           
   245                           	psect	bssCOMMON
   246     0070                     __pbssCOMMON:
   247     0070                     _year:
   248     0070                     	ds	1
   249     0071                     _month:
   250     0071                     	ds	1
   251     0072                     _date:
   252     0072                     	ds	1
   253     0073                     _day:
   254     0073                     	ds	1
   255     0074                     _hour:
   256     0074                     	ds	1
   257     0075                     _min:
   258     0075                     	ds	1
   259     0076                     _sec:
   260     0076                     	ds	1
   261                           
   262                           	psect	cstackCOMMON
   263     0077                     __pcstackCOMMON:
   264     0077                     ?_rtc_stop:
   265     0077                     ??_rtc_stop:	
   266                           ; 1 bytes @ 0x0
   267                           
   268     0077                     ?_rtc_res:	
   269                           ; 1 bytes @ 0x0
   270                           
   271     0077                     ??_rtc_res:	
   272                           ; 1 bytes @ 0x0
   273                           
   274     0077                     ?_rtc_nak:	
   275                           ; 1 bytes @ 0x0
   276                           
   277     0077                     ??_rtc_nak:	
   278                           ; 1 bytes @ 0x0
   279                           
   280     0077                     ?_LCD_Cmd:	
   281                           ; 1 bytes @ 0x0
   282                           
   283     0077                     ??_LCD_Cmd:	
   284                           ; 1 bytes @ 0x0
   285                           
   286     0077                     ?_LCD_Data:	
   287                           ; 1 bytes @ 0x0
   288                           
   289     0077                     ??_LCD_Data:	
   290                           ; 1 bytes @ 0x0
   291                           
   292     0077                     ?_LCD_Init:	
   293                           ; 1 bytes @ 0x0
   294                           
   295     0077                     ?_LCD_String:	
   296                           ; 1 bytes @ 0x0
   297                           
   298     0077                     ?_rtc_int:	
   299                           ; 1 bytes @ 0x0
   300                           
   301     0077                     ??_rtc_int:	
   302                           ; 1 bytes @ 0x0
   303                           
   304     0077                     ?_waitmssp:	
   305                           ; 1 bytes @ 0x0
   306                           
   307     0077                     ??_waitmssp:	
   308                           ; 1 bytes @ 0x0
   309                           
   310     0077                     ?_rtc_send:	
   311                           ; 1 bytes @ 0x0
   312                           
   313     0077                     ??_rtc_send:	
   314                           ; 1 bytes @ 0x0
   315                           
   316     0077                     ?_rtc_read:	
   317                           ; 1 bytes @ 0x0
   318                           
   319     0077                     ??_rtc_read:	
   320                           ; 1 bytes @ 0x0
   321                           
   322     0077                     ?_rtc_read_byte:	
   323                           ; 1 bytes @ 0x0
   324                           
   325     0077                     ?_convup:	
   326                           ; 1 bytes @ 0x0
   327                           
   328     0077                     ??_convup:	
   329                           ; 1 bytes @ 0x0
   330                           
   331     0077                     ?_convd:	
   332                           ; 1 bytes @ 0x0
   333                           
   334     0077                     ??_convd:	
   335                           ; 1 bytes @ 0x0
   336                           
   337     0077                     ?_main:	
   338                           ; 1 bytes @ 0x0
   339                           
   340     0077                     rtc_send@a:	
   341                           ; 1 bytes @ 0x0
   342                           
   343     0077                     convd@bcd:	
   344                           ; 1 bytes @ 0x0
   345                           
   346                           
   347                           ; 1 bytes @ 0x0
   348     0077                     	ds	1
   349     0078                     ??_rtc_read_byte:
   350     0078                     rtc_read_byte@addr:	
   351                           ; 1 bytes @ 0x1
   352                           
   353     0078                     convup@bcd:	
   354                           ; 1 bytes @ 0x1
   355                           
   356                           
   357                           ; 1 bytes @ 0x1
   358     0078                     	ds	1
   359     0079                     LCD_Cmd@data:
   360     0079                     LCD_Data@data:	
   361                           ; 1 bytes @ 0x2
   362                           
   363     0079                     rtc_read_byte@rec:	
   364                           ; 1 bytes @ 0x2
   365                           
   366                           
   367                           ; 1 bytes @ 0x2
   368     0079                     	ds	1
   369     007A                     ??_LCD_Init:
   370     007A                     ??_LCD_String:	
   371                           ; 1 bytes @ 0x3
   372                           
   373     007A                     LCD_String@s:	
   374                           ; 1 bytes @ 0x3
   375                           
   376                           
   377                           ; 1 bytes @ 0x3
   378     007A                     	ds	1
   379     007B                     ??_main:
   380                           
   381                           	psect	maintext
   382     06F9                     __pmaintext:	
   383                           ; 1 bytes @ 0x4
   384 ;;
   385 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   386 ;;
   387 ;; *************** function _main *****************
   388 ;; Defined at:
   389 ;;		line 175 in file "main.c"
   390 ;; Parameters:    Size  Location     Type
   391 ;;		None
   392 ;; Auto vars:     Size  Location     Type
   393 ;;		None
   394 ;; Return value:  Size  Location     Type
   395 ;;                  1    wreg      void 
   396 ;; Registers used:
   397 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   398 ;; Tracked objects:
   399 ;;		On entry : B00/0
   400 ;;		On exit  : 0/0
   401 ;;		Unchanged: 0/0
   402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   403 ;;      Params:         0       0       0       0       0
   404 ;;      Locals:         0       0       0       0       0
   405 ;;      Temps:          0       0       0       0       0
   406 ;;      Totals:         0       0       0       0       0
   407 ;;Total ram usage:        0 bytes
   408 ;; Hardware stack levels required when called: 3
   409 ;; This function calls:
   410 ;;		_LCD_Cmd
   411 ;;		_LCD_Data
   412 ;;		_LCD_Init
   413 ;;		_LCD_String
   414 ;;		_convd
   415 ;;		_convup
   416 ;;		_rtc_int
   417 ;;		_rtc_read_byte
   418 ;; This function is called by:
   419 ;;		Startup code after reset
   420 ;; This function uses a non-reentrant model
   421 ;;
   422                           
   423     06F9                     _main:	
   424                           ;psect for function _main
   425                           
   426     06F9                     l876:	
   427                           ;incstack = 0
   428                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   429                           
   430                           
   431                           ;main.c: 176:       LCD_Data(':');
   432     06F9  1683               	bsf	3,5	;RP0=1, select bank1
   433     06FA  1303               	bcf	3,6	;RP1=0, select bank1
   434     06FB  0186               	clrf	6	;volatile
   435     06FC                     l878:
   436                           
   437                           ;main.c: 177: 
   438     06FC  120A  118A  260F  120A  118A  	fcall	_rtc_int
   439     0701                     l880:
   440                           
   441                           ;main.c: 178:       LCD_Data(convup(sec));
   442     0701  120A  118A  2625  120A  118A  	fcall	_LCD_Init
   443     0706                     l882:
   444                           
   445                           ;main.c: 180:       LCD_Data(':');
   446     0706  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   447     0707  120A  118A  2644  120A  118A  	fcall	_LCD_String
   448     070C                     l884:
   449                           
   450                           ;main.c: 182:       LCD_Cmd(0xC0);
   451     070C  3000               	movlw	0
   452     070D  120A  118A  26C1  120A  118A  	fcall	_rtc_read_byte
   453     0712  00F6               	movwf	_sec
   454     0713                     l886:
   455                           
   456                           ;main.c: 183:       LCD_Data(convup(date));
   457     0713  3001               	movlw	1
   458     0714  120A  118A  26C1  120A  118A  	fcall	_rtc_read_byte
   459     0719  00F5               	movwf	_min
   460     071A                     l888:
   461                           
   462                           ;main.c: 184:       LCD_Data(convd(date));
   463     071A  3002               	movlw	2
   464     071B  120A  118A  26C1  120A  118A  	fcall	_rtc_read_byte
   465     0720  00F4               	movwf	_hour
   466     0721                     l890:
   467                           
   468                           ;main.c: 185:       LCD_Data(':');
   469     0721  3003               	movlw	3
   470     0722  120A  118A  26C1  120A  118A  	fcall	_rtc_read_byte
   471     0727  00F3               	movwf	_day
   472     0728                     l892:
   473                           
   474                           ;main.c: 186: 
   475     0728  3004               	movlw	4
   476     0729  120A  118A  26C1  120A  118A  	fcall	_rtc_read_byte
   477     072E  00F2               	movwf	_date
   478     072F                     l894:
   479                           
   480                           ;main.c: 187:       LCD_Data(convup(month));
   481     072F  3005               	movlw	5
   482     0730  120A  118A  26C1  120A  118A  	fcall	_rtc_read_byte
   483     0735  00F1               	movwf	_month
   484     0736                     l896:
   485                           
   486                           ;main.c: 188:       LCD_Data(convd(month));
   487     0736  3006               	movlw	6
   488     0737  120A  118A  26C1  120A  118A  	fcall	_rtc_read_byte
   489     073C  00F0               	movwf	_year
   490     073D                     l898:
   491                           
   492                           ;main.c: 190: 
   493     073D  3080               	movlw	128
   494     073E  120A  118A  2663  120A  118A  	fcall	_LCD_Cmd
   495     0743                     l900:
   496                           
   497                           ;main.c: 191:       LCD_Data(convup(year));
   498     0743  0874               	movf	_hour,w
   499     0744  120A  118A  25E6  120A  118A  	fcall	_convup
   500     0749  120A  118A  2692  120A  118A  	fcall	_LCD_Data
   501     074E                     l902:
   502                           
   503                           ;main.c: 192:       LCD_Data(convd(year));
   504     074E  0874               	movf	_hour,w
   505     074F  120A  118A  25BD  120A  118A  	fcall	_convd
   506     0754  120A  118A  2692  120A  118A  	fcall	_LCD_Data
   507     0759                     l904:
   508                           
   509                           ;main.c: 193:       LCD_Data(':');
   510     0759  303A               	movlw	58
   511     075A  120A  118A  2692  120A  118A  	fcall	_LCD_Data
   512     075F                     l906:
   513                           
   514                           ;main.c: 195:   return;
   515     075F  0875               	movf	_min,w
   516     0760  120A  118A  25E6  120A  118A  	fcall	_convup
   517     0765  120A  118A  2692  120A  118A  	fcall	_LCD_Data
   518     076A                     l908:
   519                           
   520                           ;main.c: 196: }
   521     076A  0875               	movf	_min,w
   522     076B  120A  118A  25BD  120A  118A  	fcall	_convd
   523     0770  120A  118A  2692  120A  118A  	fcall	_LCD_Data
   524     0775                     l910:
   525     0775  303A               	movlw	58
   526     0776  120A  118A  2692  120A  118A  	fcall	_LCD_Data
   527     077B                     l912:
   528     077B  0876               	movf	_sec,w
   529     077C  120A  118A  25E6  120A  118A  	fcall	_convup
   530     0781  120A  118A  2692  120A  118A  	fcall	_LCD_Data
   531     0786                     l914:
   532     0786  0876               	movf	_sec,w
   533     0787  120A  118A  25BD  120A  118A  	fcall	_convd
   534     078C  120A  118A  2692  120A  118A  	fcall	_LCD_Data
   535     0791                     l916:
   536     0791  303A               	movlw	58
   537     0792  120A  118A  2692  120A  118A  	fcall	_LCD_Data
   538     0797                     l918:
   539     0797  30C0               	movlw	192
   540     0798  120A  118A  2663  120A  118A  	fcall	_LCD_Cmd
   541     079D                     l920:
   542     079D  0872               	movf	_date,w
   543     079E  120A  118A  25E6  120A  118A  	fcall	_convup
   544     07A3  120A  118A  2692  120A  118A  	fcall	_LCD_Data
   545     07A8                     l922:
   546     07A8  0872               	movf	_date,w
   547     07A9  120A  118A  25BD  120A  118A  	fcall	_convd
   548     07AE  120A  118A  2692  120A  118A  	fcall	_LCD_Data
   549     07B3                     l924:
   550     07B3  303A               	movlw	58
   551     07B4  120A  118A  2692  120A  118A  	fcall	_LCD_Data
   552     07B9                     l926:
   553     07B9  0871               	movf	_month,w
   554     07BA  120A  118A  25E6  120A  118A  	fcall	_convup
   555     07BF  120A  118A  2692  120A  118A  	fcall	_LCD_Data
   556     07C4                     l928:
   557     07C4  0871               	movf	_month,w
   558     07C5  120A  118A  25BD  120A  118A  	fcall	_convd
   559     07CA  120A  118A  2692  120A  118A  	fcall	_LCD_Data
   560     07CF                     l930:
   561     07CF  303A               	movlw	58
   562     07D0  120A  118A  2692  120A  118A  	fcall	_LCD_Data
   563     07D5                     l932:
   564     07D5  0870               	movf	_year,w
   565     07D6  120A  118A  25E6  120A  118A  	fcall	_convup
   566     07DB  120A  118A  2692  120A  118A  	fcall	_LCD_Data
   567     07E0                     l934:
   568     07E0  0870               	movf	_year,w
   569     07E1  120A  118A  25BD  120A  118A  	fcall	_convd
   570     07E6  120A  118A  2692  120A  118A  	fcall	_LCD_Data
   571     07EB                     l936:
   572     07EB  303A               	movlw	58
   573     07EC  120A  118A  2692  120A  118A  	fcall	_LCD_Data
   574     07F1  2F0C               	goto	l884
   575     07F2  120A  118A  2800   	ljmp	start
   576     07F5                     __end_of_main:
   577                           
   578                           	psect	text1
   579     06C1                     __ptext1:	
   580 ;; *************** function _rtc_read_byte *****************
   581 ;; Defined at:
   582 ;;		line 122 in file "main.c"
   583 ;; Parameters:    Size  Location     Type
   584 ;;  addr            1    wreg     unsigned char 
   585 ;; Auto vars:     Size  Location     Type
   586 ;;  addr            1    1[COMMON] unsigned char 
   587 ;;  rec             1    2[COMMON] unsigned char 
   588 ;; Return value:  Size  Location     Type
   589 ;;                  1    wreg      unsigned char 
   590 ;; Registers used:
   591 ;;		wreg, status,2, status,0, pclath, cstack
   592 ;; Tracked objects:
   593 ;;		On entry : 0/0
   594 ;;		On exit  : 0/0
   595 ;;		Unchanged: 0/0
   596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   597 ;;      Params:         0       0       0       0       0
   598 ;;      Locals:         2       0       0       0       0
   599 ;;      Temps:          0       0       0       0       0
   600 ;;      Totals:         2       0       0       0       0
   601 ;;Total ram usage:        2 bytes
   602 ;; Hardware stack levels used: 1
   603 ;; Hardware stack levels required when called: 2
   604 ;; This function calls:
   605 ;;		_rtc_nak
   606 ;;		_rtc_read
   607 ;;		_rtc_res
   608 ;;		_rtc_send
   609 ;;		_rtc_stop
   610 ;;		_waitmssp
   611 ;; This function is called by:
   612 ;;		_main
   613 ;; This function uses a non-reentrant model
   614 ;;
   615                           
   616     06C1                     _rtc_read_byte:	
   617                           ;psect for function _rtc_read_byte
   618                           
   619                           
   620                           ;incstack = 0
   621                           ; Regs used in _rtc_read_byte: [wreg+status,2+status,0+pclath+cstack]
   622                           ;rtc_read_byte@addr stored from wreg
   623     06C1  00F8               	movwf	rtc_read_byte@addr
   624     06C2                     l95:	
   625                           ;main.c: 122: };main.c: 123: void rtc_stop();main.c: 124: {;main.c: 125:     PEN=1;
   626                           
   627     06C2                     l760:
   628     06C2  120A  118A  25CA  120A  118A  	fcall	_rtc_res
   629     06C7                     l762:
   630                           
   631                           ;main.c: 126:     waitmssp();
   632     06C7  30D0               	movlw	208
   633     06C8  1283               	bcf	3,5	;RP0=0, select bank0
   634     06C9  1303               	bcf	3,6	;RP1=0, select bank0
   635     06CA  0093               	movwf	19	;volatile
   636     06CB                     l764:
   637                           
   638                           ;main.c: 127: }
   639     06CB  120A  118A  25C2  120A  118A  	fcall	_waitmssp
   640     06D0                     l96:	
   641                           ;main.c: 128: void rtc_res()
   642                           
   643     06D0  1683               	bsf	3,5	;RP0=1, select bank1
   644     06D1  1303               	bcf	3,6	;RP1=0, select bank1
   645     06D2  1B11               	btfsc	17,6	;volatile
   646     06D3  2ED5               	goto	u81
   647     06D4  2ED6               	goto	u80
   648     06D5                     u81:
   649     06D5  2EC2               	goto	l95
   650     06D6                     u80:
   651     06D6                     l766:
   652                           
   653                           ;main.c: 130:     RSEN=1;
   654     06D6  0878               	movf	rtc_read_byte@addr,w
   655     06D7  120A  118A  25FE  120A  118A  	fcall	_rtc_send
   656     06DC                     l768:
   657                           
   658                           ;main.c: 131:     waitmssp();
   659     06DC  120A  118A  25CA  120A  118A  	fcall	_rtc_res
   660     06E1                     l770:
   661                           
   662                           ;main.c: 132: }
   663     06E1  30D1               	movlw	209
   664     06E2  120A  118A  25FE  120A  118A  	fcall	_rtc_send
   665     06E7                     l772:
   666                           
   667                           ;main.c: 133: void rtc_ack()
   668     06E7  120A  118A  25F2  120A  118A  	fcall	_rtc_read
   669     06EC  00F9               	movwf	rtc_read_byte@rec
   670     06ED                     l774:
   671                           
   672                           ;main.c: 134: {
   673     06ED  120A  118A  25DC  120A  118A  	fcall	_rtc_nak
   674     06F2                     l776:
   675                           
   676                           ;main.c: 135:     ACKDT=0;
   677     06F2  120A  118A  25D3  120A  118A  	fcall	_rtc_stop
   678                           
   679                           ;main.c: 136:     ACKEN=1;
   680     06F7  0879               	movf	rtc_read_byte@rec,w
   681     06F8                     l99:
   682     06F8  0008               	return
   683     06F9                     __end_of_rtc_read_byte:
   684                           
   685                           	psect	text2
   686     05D3                     __ptext2:	
   687 ;; *************** function _rtc_stop *****************
   688 ;; Defined at:
   689 ;;		line 144 in file "main.c"
   690 ;; Parameters:    Size  Location     Type
   691 ;;		None
   692 ;; Auto vars:     Size  Location     Type
   693 ;;		None
   694 ;; Return value:  Size  Location     Type
   695 ;;                  1    wreg      void 
   696 ;; Registers used:
   697 ;;		status,2, status,0, pclath, cstack
   698 ;; Tracked objects:
   699 ;;		On entry : 0/0
   700 ;;		On exit  : 0/0
   701 ;;		Unchanged: 0/0
   702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   703 ;;      Params:         0       0       0       0       0
   704 ;;      Locals:         0       0       0       0       0
   705 ;;      Temps:          0       0       0       0       0
   706 ;;      Totals:         0       0       0       0       0
   707 ;;Total ram usage:        0 bytes
   708 ;; Hardware stack levels used: 1
   709 ;; Hardware stack levels required when called: 1
   710 ;; This function calls:
   711 ;;		_waitmssp
   712 ;; This function is called by:
   713 ;;		_rtc_read_byte
   714 ;;		_rtc_send_byte
   715 ;; This function uses a non-reentrant model
   716 ;;
   717                           
   718     05D3                     _rtc_stop:	
   719                           ;psect for function _rtc_stop
   720                           
   721     05D3                     l726:	
   722                           ;incstack = 0
   723                           ; Regs used in _rtc_stop: [status,2+status,0+pclath+cstack]
   724                           
   725                           
   726                           ;main.c: 146: {
   727     05D3  1683               	bsf	3,5	;RP0=1, select bank1
   728     05D4  1303               	bcf	3,6	;RP1=0, select bank1
   729     05D5  1511               	bsf	17,2	;volatile
   730     05D6                     l728:
   731                           
   732                           ;main.c: 147:     return ((bcd>>4)+48);
   733     05D6  120A  118A  25C2  120A  118A  	fcall	_waitmssp
   734     05DB                     l105:
   735     05DB  0008               	return
   736     05DC                     __end_of_rtc_stop:
   737                           
   738                           	psect	text3
   739     05FE                     __ptext3:	
   740 ;; *************** function _rtc_send *****************
   741 ;; Defined at:
   742 ;;		line 100 in file "main.c"
   743 ;; Parameters:    Size  Location     Type
   744 ;;  a               1    wreg     unsigned char 
   745 ;; Auto vars:     Size  Location     Type
   746 ;;  a               1    0[COMMON] unsigned char 
   747 ;; Return value:  Size  Location     Type
   748 ;;                  1    wreg      void 
   749 ;; Registers used:
   750 ;;		wreg, status,2, status,0, pclath, cstack
   751 ;; Tracked objects:
   752 ;;		On entry : 0/0
   753 ;;		On exit  : 0/0
   754 ;;		Unchanged: 0/0
   755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   756 ;;      Params:         0       0       0       0       0
   757 ;;      Locals:         1       0       0       0       0
   758 ;;      Temps:          0       0       0       0       0
   759 ;;      Totals:         1       0       0       0       0
   760 ;;Total ram usage:        1 bytes
   761 ;; Hardware stack levels used: 1
   762 ;; Hardware stack levels required when called: 1
   763 ;; This function calls:
   764 ;;		_waitmssp
   765 ;; This function is called by:
   766 ;;		_rtc_read_byte
   767 ;;		_rtc_send_byte
   768 ;; This function uses a non-reentrant model
   769 ;;
   770                           
   771     05FE                     _rtc_send:	
   772                           ;psect for function _rtc_send
   773                           
   774                           
   775                           ;incstack = 0
   776                           ; Regs used in _rtc_send: [wreg+status,2+status,0+pclath+cstack]
   777                           ;rtc_send@a stored from wreg
   778     05FE  00F7               	movwf	rtc_send@a
   779     05FF                     l722:
   780                           
   781                           ;main.c: 100: ;main.c: 101: unsigned char rtc_read_byte(unsigned char addr);main.c: 102:
      +                           {
   782     05FF  0877               	movf	rtc_send@a,w
   783     0600  1283               	bcf	3,5	;RP0=0, select bank0
   784     0601  1303               	bcf	3,6	;RP1=0, select bank0
   785     0602  0093               	movwf	19	;volatile
   786     0603                     l724:
   787                           
   788                           ;main.c: 103:     unsigned char rec;
   789     0603  120A  118A  25C2  120A  118A  	fcall	_waitmssp
   790     0608                     l83:	
   791                           ;main.c: 104: L: rtc_res();
   792                           
   793     0608  1683               	bsf	3,5	;RP0=1, select bank1
   794     0609  1303               	bcf	3,6	;RP1=0, select bank1
   795     060A  1B11               	btfsc	17,6	;volatile
   796     060B  2E0D               	goto	u41
   797     060C  2E0E               	goto	u40
   798     060D                     u41:
   799     060D  2E08               	goto	l83
   800     060E                     u40:
   801     060E                     l86:
   802     060E  0008               	return
   803     060F                     __end_of_rtc_send:
   804                           
   805                           	psect	text4
   806     05CA                     __ptext4:	
   807 ;; *************** function _rtc_res *****************
   808 ;; Defined at:
   809 ;;		line 149 in file "main.c"
   810 ;; Parameters:    Size  Location     Type
   811 ;;		None
   812 ;; Auto vars:     Size  Location     Type
   813 ;;		None
   814 ;; Return value:  Size  Location     Type
   815 ;;                  1    wreg      void 
   816 ;; Registers used:
   817 ;;		status,2, status,0, pclath, cstack
   818 ;; Tracked objects:
   819 ;;		On entry : 0/0
   820 ;;		On exit  : 0/0
   821 ;;		Unchanged: 0/0
   822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   823 ;;      Params:         0       0       0       0       0
   824 ;;      Locals:         0       0       0       0       0
   825 ;;      Temps:          0       0       0       0       0
   826 ;;      Totals:         0       0       0       0       0
   827 ;;Total ram usage:        0 bytes
   828 ;; Hardware stack levels used: 1
   829 ;; Hardware stack levels required when called: 1
   830 ;; This function calls:
   831 ;;		_waitmssp
   832 ;; This function is called by:
   833 ;;		_rtc_read_byte
   834 ;; This function uses a non-reentrant model
   835 ;;
   836                           
   837     05CA                     _rtc_res:	
   838                           ;psect for function _rtc_res
   839                           
   840     05CA                     l738:	
   841                           ;incstack = 0
   842                           ; Regs used in _rtc_res: [status,2+status,0+pclath+cstack]
   843                           
   844                           
   845                           ;main.c: 151:     return ((bcd&0x0F)+48);
   846     05CA  1683               	bsf	3,5	;RP0=1, select bank1
   847     05CB  1303               	bcf	3,6	;RP1=0, select bank1
   848     05CC  1491               	bsf	17,1	;volatile
   849     05CD                     l740:
   850                           
   851                           ;main.c: 152: }
   852     05CD  120A  118A  25C2  120A  118A  	fcall	_waitmssp
   853     05D2                     l108:
   854     05D2  0008               	return
   855     05D3                     __end_of_rtc_res:
   856                           
   857                           	psect	text5
   858     05F2                     __ptext5:	
   859 ;; *************** function _rtc_read *****************
   860 ;; Defined at:
   861 ;;		line 115 in file "main.c"
   862 ;; Parameters:    Size  Location     Type
   863 ;;		None
   864 ;; Auto vars:     Size  Location     Type
   865 ;;		None
   866 ;; Return value:  Size  Location     Type
   867 ;;                  1    wreg      unsigned char 
   868 ;; Registers used:
   869 ;;		wreg, status,2, status,0, pclath, cstack
   870 ;; Tracked objects:
   871 ;;		On entry : 0/0
   872 ;;		On exit  : 0/0
   873 ;;		Unchanged: 0/0
   874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   875 ;;      Params:         0       0       0       0       0
   876 ;;      Locals:         0       0       0       0       0
   877 ;;      Temps:          0       0       0       0       0
   878 ;;      Totals:         0       0       0       0       0
   879 ;;Total ram usage:        0 bytes
   880 ;; Hardware stack levels used: 1
   881 ;; Hardware stack levels required when called: 1
   882 ;; This function calls:
   883 ;;		_waitmssp
   884 ;; This function is called by:
   885 ;;		_rtc_read_byte
   886 ;; This function uses a non-reentrant model
   887 ;;
   888                           
   889     05F2                     _rtc_read:	
   890                           ;psect for function _rtc_read
   891                           
   892     05F2                     l730:	
   893                           ;incstack = 0
   894                           ; Regs used in _rtc_read: [wreg+status,2+status,0+pclath+cstack]
   895                           
   896                           
   897                           ;main.c: 117: 
   898     05F2  1683               	bsf	3,5	;RP0=1, select bank1
   899     05F3  1303               	bcf	3,6	;RP1=0, select bank1
   900     05F4  1591               	bsf	17,3	;volatile
   901     05F5                     l732:
   902                           
   903                           ;main.c: 118: void rtc_start(void)
   904     05F5  120A  118A  25C2  120A  118A  	fcall	_waitmssp
   905     05FA                     l734:
   906                           
   907                           ;main.c: 119: {
   908     05FA  1283               	bcf	3,5	;RP0=0, select bank0
   909     05FB  1303               	bcf	3,6	;RP1=0, select bank0
   910     05FC  0813               	movf	19,w	;volatile
   911     05FD                     l92:
   912     05FD  0008               	return
   913     05FE                     __end_of_rtc_read:
   914                           
   915                           	psect	text6
   916     05DC                     __ptext6:	
   917 ;; *************** function _rtc_nak *****************
   918 ;; Defined at:
   919 ;;		line 160 in file "main.c"
   920 ;; Parameters:    Size  Location     Type
   921 ;;		None
   922 ;; Auto vars:     Size  Location     Type
   923 ;;		None
   924 ;; Return value:  Size  Location     Type
   925 ;;                  1    wreg      void 
   926 ;; Registers used:
   927 ;;		status,2, status,0, pclath, cstack
   928 ;; Tracked objects:
   929 ;;		On entry : 0/0
   930 ;;		On exit  : 0/0
   931 ;;		Unchanged: 0/0
   932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   933 ;;      Params:         0       0       0       0       0
   934 ;;      Locals:         0       0       0       0       0
   935 ;;      Temps:          0       0       0       0       0
   936 ;;      Totals:         0       0       0       0       0
   937 ;;Total ram usage:        0 bytes
   938 ;; Hardware stack levels used: 1
   939 ;; Hardware stack levels required when called: 1
   940 ;; This function calls:
   941 ;;		_waitmssp
   942 ;; This function is called by:
   943 ;;		_rtc_read_byte
   944 ;; This function uses a non-reentrant model
   945 ;;
   946                           
   947     05DC                     _rtc_nak:	
   948                           ;psect for function _rtc_nak
   949                           
   950     05DC                     l742:	
   951                           ;incstack = 0
   952                           ; Regs used in _rtc_nak: [status,2+status,0+pclath+cstack]
   953                           
   954                           
   955                           ;main.c: 162:       min = rtc_read_byte(0x01);
   956     05DC  1683               	bsf	3,5	;RP0=1, select bank1
   957     05DD  1303               	bcf	3,6	;RP1=0, select bank1
   958     05DE  1691               	bsf	17,5	;volatile
   959                           
   960                           ;main.c: 163:       hour = rtc_read_byte(0x02);
   961     05DF  1611               	bsf	17,4	;volatile
   962     05E0                     l744:
   963                           
   964                           ;main.c: 164:       day = rtc_read_byte(0x03);
   965     05E0  120A  118A  25C2  120A  118A  	fcall	_waitmssp
   966     05E5                     l114:
   967     05E5  0008               	return
   968     05E6                     __end_of_rtc_nak:
   969                           
   970                           	psect	text7
   971     05C2                     __ptext7:	
   972 ;; *************** function _waitmssp *****************
   973 ;; Defined at:
   974 ;;		line 95 in file "main.c"
   975 ;; Parameters:    Size  Location     Type
   976 ;;		None
   977 ;; Auto vars:     Size  Location     Type
   978 ;;		None
   979 ;; Return value:  Size  Location     Type
   980 ;;                  1    wreg      void 
   981 ;; Registers used:
   982 ;;		None
   983 ;; Tracked objects:
   984 ;;		On entry : 0/0
   985 ;;		On exit  : 0/0
   986 ;;		Unchanged: 0/0
   987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   988 ;;      Params:         0       0       0       0       0
   989 ;;      Locals:         0       0       0       0       0
   990 ;;      Temps:          0       0       0       0       0
   991 ;;      Totals:         0       0       0       0       0
   992 ;;Total ram usage:        0 bytes
   993 ;; Hardware stack levels used: 1
   994 ;; This function calls:
   995 ;;		Nothing
   996 ;; This function is called by:
   997 ;;		_rtc_send
   998 ;;		_rtc_read
   999 ;;		_rtc_read_byte
  1000 ;;		_rtc_stop
  1001 ;;		_rtc_res
  1002 ;;		_rtc_nak
  1003 ;;		_rtc_start
  1004 ;;		_rtc_ack
  1005 ;; This function uses a non-reentrant model
  1006 ;;
  1007                           
  1008     05C2                     _waitmssp:	
  1009                           ;psect for function _waitmssp
  1010                           
  1011     05C2                     l672:	
  1012                           ;incstack = 0
  1013                           ; Regs used in _waitmssp: []
  1014                           
  1015     05C2                     l77:	
  1016                           ;main.c: 97:     waitmssp();
  1017                           
  1018     05C2  1283               	bcf	3,5	;RP0=0, select bank0
  1019     05C3  1303               	bcf	3,6	;RP1=0, select bank0
  1020     05C4  1D8C               	btfss	12,3	;volatile
  1021     05C5  2DC7               	goto	u11
  1022     05C6  2DC8               	goto	u10
  1023     05C7                     u11:
  1024     05C7  2DC2               	goto	l77
  1025     05C8                     u10:
  1026     05C8                     l79:
  1027                           
  1028                           ;main.c: 98:     return SSPBUF;
  1029     05C8  118C               	bcf	12,3	;volatile
  1030     05C9                     l80:
  1031     05C9  0008               	return
  1032     05CA                     __end_of_waitmssp:
  1033                           
  1034                           	psect	text8
  1035     060F                     __ptext8:	
  1036 ;; *************** function _rtc_int *****************
  1037 ;; Defined at:
  1038 ;;		line 89 in file "main.c"
  1039 ;; Parameters:    Size  Location     Type
  1040 ;;		None
  1041 ;; Auto vars:     Size  Location     Type
  1042 ;;		None
  1043 ;; Return value:  Size  Location     Type
  1044 ;;                  1    wreg      void 
  1045 ;; Registers used:
  1046 ;;		wreg
  1047 ;; Tracked objects:
  1048 ;;		On entry : 0/0
  1049 ;;		On exit  : 0/0
  1050 ;;		Unchanged: 0/0
  1051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1052 ;;      Params:         0       0       0       0       0
  1053 ;;      Locals:         0       0       0       0       0
  1054 ;;      Temps:          0       0       0       0       0
  1055 ;;      Totals:         0       0       0       0       0
  1056 ;;Total ram usage:        0 bytes
  1057 ;; Hardware stack levels used: 1
  1058 ;; This function calls:
  1059 ;;		Nothing
  1060 ;; This function is called by:
  1061 ;;		_main
  1062 ;; This function uses a non-reentrant model
  1063 ;;
  1064                           
  1065     060F                     _rtc_int:	
  1066                           ;psect for function _rtc_int
  1067                           
  1068     060F                     l756:	
  1069                           ;incstack = 0
  1070                           ; Regs used in _rtc_int: [wreg]
  1071                           
  1072                           
  1073                           ;main.c: 91:     rtc_send(data);
  1074     060F  1683               	bsf	3,5	;RP0=1, select bank1
  1075     0610  1303               	bcf	3,6	;RP1=0, select bank1
  1076     0611  1607               	bsf	7,4	;volatile
  1077     0612  1A07               	btfsc	7,4	;volatile
  1078     0613  2E15               	goto	u61
  1079     0614  2E19               	goto	u60
  1080     0615                     u61:
  1081     0615  1683               	bsf	3,5	;RP0=1, select bank1
  1082     0616  1303               	bcf	3,6	;RP1=0, select bank1
  1083     0617  1587               	bsf	7,3	;volatile
  1084     0618  2E1C               	goto	u74
  1085     0619                     u60:
  1086     0619  1683               	bsf	3,5	;RP0=1, select bank1
  1087     061A  1303               	bcf	3,6	;RP1=0, select bank1
  1088     061B  1187               	bcf	7,3	;volatile
  1089     061C                     u74:
  1090     061C                     l758:
  1091                           
  1092                           ;main.c: 92:     rtc_stop();
  1093     061C  3028               	movlw	40
  1094     061D  1283               	bcf	3,5	;RP0=0, select bank0
  1095     061E  1303               	bcf	3,6	;RP1=0, select bank0
  1096     061F  0094               	movwf	20	;volatile
  1097                           
  1098                           ;main.c: 93: }
  1099     0620  30FF               	movlw	255
  1100     0621  1683               	bsf	3,5	;RP0=1, select bank1
  1101     0622  1303               	bcf	3,6	;RP1=0, select bank1
  1102     0623  0093               	movwf	19	;volatile
  1103     0624                     l74:
  1104     0624  0008               	return
  1105     0625                     __end_of_rtc_int:
  1106                           
  1107                           	psect	text9
  1108     05E6                     __ptext9:	
  1109 ;; *************** function _convup *****************
  1110 ;; Defined at:
  1111 ;;		line 166 in file "main.c"
  1112 ;; Parameters:    Size  Location     Type
  1113 ;;  bcd             1    wreg     unsigned char 
  1114 ;; Auto vars:     Size  Location     Type
  1115 ;;  bcd             1    1[COMMON] unsigned char 
  1116 ;; Return value:  Size  Location     Type
  1117 ;;                  1    wreg      unsigned char 
  1118 ;; Registers used:
  1119 ;;		wreg, status,2, status,0
  1120 ;; Tracked objects:
  1121 ;;		On entry : 0/0
  1122 ;;		On exit  : 0/0
  1123 ;;		Unchanged: 0/0
  1124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1125 ;;      Params:         0       0       0       0       0
  1126 ;;      Locals:         1       0       0       0       0
  1127 ;;      Temps:          1       0       0       0       0
  1128 ;;      Totals:         2       0       0       0       0
  1129 ;;Total ram usage:        2 bytes
  1130 ;; Hardware stack levels used: 1
  1131 ;; This function calls:
  1132 ;;		Nothing
  1133 ;; This function is called by:
  1134 ;;		_main
  1135 ;; This function uses a non-reentrant model
  1136 ;;
  1137                           
  1138     05E6                     _convup:	
  1139                           ;psect for function _convup
  1140                           
  1141                           
  1142                           ;incstack = 0
  1143                           ; Regs used in _convup: [wreg+status,2+status,0]
  1144                           ;convup@bcd stored from wreg
  1145     05E6  00F8               	movwf	convup@bcd
  1146     05E7                     l780:
  1147                           
  1148                           ;main.c: 166:       month = rtc_read_byte(0x05);;main.c: 167:       year = rtc_read_byte
      +                          (0x06);;main.c: 168: 
  1149     05E7  0878               	movf	convup@bcd,w
  1150     05E8  00F7               	movwf	??_convup
  1151     05E9  3004               	movlw	4
  1152     05EA                     u95:
  1153     05EA  1003               	clrc
  1154     05EB  0CF7               	rrf	??_convup,f
  1155     05EC  3EFF               	addlw	-1
  1156     05ED  1D03               	skipz
  1157     05EE  2DEA               	goto	u95
  1158     05EF  0877               	movf	??_convup,w
  1159     05F0  3E30               	addlw	48
  1160     05F1                     l117:
  1161     05F1  0008               	return
  1162     05F2                     __end_of_convup:
  1163                           
  1164                           	psect	text10
  1165     05BD                     __ptext10:	
  1166 ;; *************** function _convd *****************
  1167 ;; Defined at:
  1168 ;;		line 170 in file "main.c"
  1169 ;; Parameters:    Size  Location     Type
  1170 ;;  bcd             1    wreg     unsigned char 
  1171 ;; Auto vars:     Size  Location     Type
  1172 ;;  bcd             1    0[COMMON] unsigned char 
  1173 ;; Return value:  Size  Location     Type
  1174 ;;                  1    wreg      unsigned char 
  1175 ;; Registers used:
  1176 ;;		wreg, status,2, status,0
  1177 ;; Tracked objects:
  1178 ;;		On entry : 0/0
  1179 ;;		On exit  : 0/0
  1180 ;;		Unchanged: 0/0
  1181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1182 ;;      Params:         0       0       0       0       0
  1183 ;;      Locals:         1       0       0       0       0
  1184 ;;      Temps:          0       0       0       0       0
  1185 ;;      Totals:         1       0       0       0       0
  1186 ;;Total ram usage:        1 bytes
  1187 ;; Hardware stack levels used: 1
  1188 ;; This function calls:
  1189 ;;		Nothing
  1190 ;; This function is called by:
  1191 ;;		_main
  1192 ;; This function uses a non-reentrant model
  1193 ;;
  1194                           
  1195     05BD                     _convd:	
  1196                           ;psect for function _convd
  1197                           
  1198                           
  1199                           ;incstack = 0
  1200                           ; Regs used in _convd: [wreg+status,2+status,0]
  1201                           ;convd@bcd stored from wreg
  1202     05BD  00F7               	movwf	convd@bcd
  1203     05BE                     l784:
  1204                           
  1205                           ;main.c: 170:       LCD_Data(convup(hour));;main.c: 171:       LCD_Data(convd(hour));;ma
      +                          in.c: 172:       LCD_Data(':');
  1206     05BE  0877               	movf	convd@bcd,w
  1207     05BF  390F               	andlw	15
  1208     05C0  3E30               	addlw	48
  1209     05C1                     l120:
  1210     05C1  0008               	return
  1211     05C2                     __end_of_convd:
  1212                           
  1213                           	psect	text11
  1214     0644                     __ptext11:	
  1215 ;; *************** function _LCD_String *****************
  1216 ;; Defined at:
  1217 ;;		line 83 in file "main.c"
  1218 ;; Parameters:    Size  Location     Type
  1219 ;;  s               1    wreg     PTR unsigned char 
  1220 ;;		 -> STR_1(9), 
  1221 ;; Auto vars:     Size  Location     Type
  1222 ;;  s               1    3[COMMON] PTR unsigned char 
  1223 ;;		 -> STR_1(9), 
  1224 ;; Return value:  Size  Location     Type
  1225 ;;                  1    wreg      void 
  1226 ;; Registers used:
  1227 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1228 ;; Tracked objects:
  1229 ;;		On entry : 0/0
  1230 ;;		On exit  : 0/0
  1231 ;;		Unchanged: 0/0
  1232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1233 ;;      Params:         0       0       0       0       0
  1234 ;;      Locals:         1       0       0       0       0
  1235 ;;      Temps:          0       0       0       0       0
  1236 ;;      Totals:         1       0       0       0       0
  1237 ;;Total ram usage:        1 bytes
  1238 ;; Hardware stack levels used: 1
  1239 ;; Hardware stack levels required when called: 1
  1240 ;; This function calls:
  1241 ;;		_LCD_Data
  1242 ;; This function is called by:
  1243 ;;		_main
  1244 ;; This function uses a non-reentrant model
  1245 ;;
  1246                           
  1247     0644                     _LCD_String:	
  1248                           ;psect for function _LCD_String
  1249                           
  1250                           
  1251                           ;incstack = 0
  1252                           ; Regs used in _LCD_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1253                           ;LCD_String@s stored from wreg
  1254     0644  00FA               	movwf	LCD_String@s
  1255     0645                     l868:
  1256                           
  1257                           ;main.c: 84: }
  1258     0645  2E56               	goto	l874
  1259     0646                     l870:
  1260                           
  1261                           ;main.c: 85: void rtc_send_byte(unsigned char addr,unsigned char data)
  1262     0646  087A               	movf	LCD_String@s,w
  1263     0647  0084               	movwf	4
  1264     0648  120A  118A  2003  120A  118A  	fcall	stringdir
  1265     064D  120A  118A  2692  120A  118A  	fcall	_LCD_Data
  1266     0652                     l872:
  1267     0652  3001               	movlw	1
  1268     0653  00FF               	movwf	btemp+1
  1269     0654  087F               	movf	btemp+1,w
  1270     0655  07FA               	addwf	LCD_String@s,f
  1271     0656                     l874:
  1272                           
  1273                           ;main.c: 84: }
  1274     0656  087A               	movf	LCD_String@s,w
  1275     0657  0084               	movwf	4
  1276     0658  120A  118A  2003  120A  118A  	fcall	stringdir
  1277     065D  3A00               	xorlw	0
  1278     065E  1D03               	skipz
  1279     065F  2E61               	goto	u101
  1280     0660  2E62               	goto	u100
  1281     0661                     u101:
  1282     0661  2E46               	goto	l870
  1283     0662                     u100:
  1284     0662                     l71:
  1285     0662  0008               	return
  1286     0663                     __end_of_LCD_String:
  1287                           
  1288                           	psect	text12
  1289     0692                     __ptext12:	
  1290 ;; *************** function _LCD_Data *****************
  1291 ;; Defined at:
  1292 ;;		line 60 in file "main.c"
  1293 ;; Parameters:    Size  Location     Type
  1294 ;;  data            1    wreg     unsigned char 
  1295 ;; Auto vars:     Size  Location     Type
  1296 ;;  data            1    2[COMMON] unsigned char 
  1297 ;; Return value:  Size  Location     Type
  1298 ;;                  1    wreg      void 
  1299 ;; Registers used:
  1300 ;;		wreg, status,2, status,0
  1301 ;; Tracked objects:
  1302 ;;		On entry : 0/0
  1303 ;;		On exit  : 0/0
  1304 ;;		Unchanged: 0/0
  1305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1306 ;;      Params:         0       0       0       0       0
  1307 ;;      Locals:         1       0       0       0       0
  1308 ;;      Temps:          2       0       0       0       0
  1309 ;;      Totals:         3       0       0       0       0
  1310 ;;Total ram usage:        3 bytes
  1311 ;; Hardware stack levels used: 1
  1312 ;; This function calls:
  1313 ;;		Nothing
  1314 ;; This function is called by:
  1315 ;;		_LCD_String
  1316 ;;		_main
  1317 ;; This function uses a non-reentrant model
  1318 ;;
  1319                           
  1320     0692                     _LCD_Data:	
  1321                           ;psect for function _LCD_Data
  1322                           
  1323                           
  1324                           ;incstack = 0
  1325                           ; Regs used in _LCD_Data: [wreg+status,2+status,0]
  1326                           ;LCD_Data@data stored from wreg
  1327     0692  00F9               	movwf	LCD_Data@data
  1328     0693                     l698:
  1329                           
  1330                           ;main.c: 61: 
  1331     0693  0879               	movf	LCD_Data@data,w
  1332     0694  39F0               	andlw	240
  1333     0695  1283               	bcf	3,5	;RP0=0, select bank0
  1334     0696  1303               	bcf	3,6	;RP1=0, select bank0
  1335     0697  0086               	movwf	6	;volatile
  1336     0698                     l700:
  1337                           
  1338                           ;main.c: 62: void LCD_String(unsigned char *s){
  1339     0698  1506               	bsf	6,2	;volatile
  1340     0699                     l702:
  1341                           
  1342                           ;main.c: 63:     while(*s){
  1343     0699  1086               	bcf	6,1	;volatile
  1344     069A                     l704:
  1345                           
  1346                           ;main.c: 64:         LCD_Data(*s++);
  1347     069A  1406               	bsf	6,0	;volatile
  1348     069B                     l706:
  1349                           
  1350                           ;main.c: 65:     }
  1351     069B  3007               	movlw	7
  1352     069C  00F8               	movwf	??_LCD_Data+1
  1353     069D  307D               	movlw	125
  1354     069E  00F7               	movwf	??_LCD_Data
  1355     069F                     u117:
  1356     069F  0BF7               	decfsz	??_LCD_Data,f
  1357     06A0  2E9F               	goto	u117
  1358     06A1  0BF8               	decfsz	??_LCD_Data+1,f
  1359     06A2  2E9F               	goto	u117
  1360     06A3                     l708:
  1361                           
  1362                           ;main.c: 66: }
  1363     06A3  1283               	bcf	3,5	;RP0=0, select bank0
  1364     06A4  1303               	bcf	3,6	;RP1=0, select bank0
  1365     06A5  1106               	bcf	6,2	;volatile
  1366     06A6                     l710:
  1367                           
  1368                           ;main.c: 67: 
  1369     06A6  0879               	movf	LCD_Data@data,w
  1370     06A7  00F7               	movwf	??_LCD_Data
  1371     06A8  3003               	movlw	3
  1372     06A9                     u35:
  1373     06A9  1003               	clrc
  1374     06AA  0DF7               	rlf	??_LCD_Data,f
  1375     06AB  3EFF               	addlw	-1
  1376     06AC  1D03               	skipz
  1377     06AD  2EA9               	goto	u35
  1378     06AE  1003               	clrc
  1379     06AF  0D77               	rlf	??_LCD_Data,w
  1380     06B0  39F0               	andlw	240
  1381     06B1  0086               	movwf	6	;volatile
  1382     06B2                     l712:
  1383                           
  1384                           ;main.c: 68: void rtc_int()
  1385     06B2  1506               	bsf	6,2	;volatile
  1386     06B3                     l714:
  1387                           
  1388                           ;main.c: 69: {
  1389     06B3  1086               	bcf	6,1	;volatile
  1390     06B4                     l716:
  1391                           
  1392                           ;main.c: 70:     TRISC3=TRISC4=1;
  1393     06B4  1406               	bsf	6,0	;volatile
  1394     06B5                     l718:
  1395                           
  1396                           ;main.c: 71:     SSPCON=0x28;
  1397     06B5  3007               	movlw	7
  1398     06B6  00F8               	movwf	??_LCD_Data+1
  1399     06B7  307D               	movlw	125
  1400     06B8  00F7               	movwf	??_LCD_Data
  1401     06B9                     u127:
  1402     06B9  0BF7               	decfsz	??_LCD_Data,f
  1403     06BA  2EB9               	goto	u127
  1404     06BB  0BF8               	decfsz	??_LCD_Data+1,f
  1405     06BC  2EB9               	goto	u127
  1406     06BD                     l720:
  1407                           
  1408                           ;main.c: 72:     SSPADD= (((11059200/4)/100)-1);
  1409     06BD  1283               	bcf	3,5	;RP0=0, select bank0
  1410     06BE  1303               	bcf	3,6	;RP1=0, select bank0
  1411     06BF  1106               	bcf	6,2	;volatile
  1412     06C0                     l62:
  1413     06C0  0008               	return
  1414     06C1                     __end_of_LCD_Data:
  1415                           
  1416                           	psect	text13
  1417     0625                     __ptext13:	
  1418 ;; *************** function _LCD_Init *****************
  1419 ;; Defined at:
  1420 ;;		line 75 in file "main.c"
  1421 ;; Parameters:    Size  Location     Type
  1422 ;;		None
  1423 ;; Auto vars:     Size  Location     Type
  1424 ;;		None
  1425 ;; Return value:  Size  Location     Type
  1426 ;;                  1    wreg      void 
  1427 ;; Registers used:
  1428 ;;		wreg, status,2, status,0, pclath, cstack
  1429 ;; Tracked objects:
  1430 ;;		On entry : 0/0
  1431 ;;		On exit  : 0/0
  1432 ;;		Unchanged: 0/0
  1433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1434 ;;      Params:         0       0       0       0       0
  1435 ;;      Locals:         0       0       0       0       0
  1436 ;;      Temps:          0       0       0       0       0
  1437 ;;      Totals:         0       0       0       0       0
  1438 ;;Total ram usage:        0 bytes
  1439 ;; Hardware stack levels used: 1
  1440 ;; Hardware stack levels required when called: 1
  1441 ;; This function calls:
  1442 ;;		_LCD_Cmd
  1443 ;; This function is called by:
  1444 ;;		_main
  1445 ;; This function uses a non-reentrant model
  1446 ;;
  1447                           
  1448     0625                     _LCD_Init:	
  1449                           ;psect for function _LCD_Init
  1450                           
  1451     0625                     l746:	
  1452                           ;incstack = 0
  1453                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  1454                           
  1455                           
  1456                           ;main.c: 76:     while(!SSPIF);
  1457     0625  3002               	movlw	2
  1458     0626  120A  118A  2663  120A  118A  	fcall	_LCD_Cmd
  1459                           
  1460                           ;main.c: 77:     SSPIF=0;
  1461     062B  3028               	movlw	40
  1462     062C  120A  118A  2663  120A  118A  	fcall	_LCD_Cmd
  1463                           
  1464                           ;main.c: 78: }
  1465     0631  300C               	movlw	12
  1466     0632  120A  118A  2663  120A  118A  	fcall	_LCD_Cmd
  1467                           
  1468                           ;main.c: 79: void rtc_send(unsigned char a)
  1469     0637  3006               	movlw	6
  1470     0638  120A  118A  2663  120A  118A  	fcall	_LCD_Cmd
  1471                           
  1472                           ;main.c: 80: {
  1473     063D  3001               	movlw	1
  1474     063E  120A  118A  2663  120A  118A  	fcall	_LCD_Cmd
  1475     0643                     l65:
  1476     0643  0008               	return
  1477     0644                     __end_of_LCD_Init:
  1478                           
  1479                           	psect	text14
  1480     0663                     __ptext14:	
  1481 ;; *************** function _LCD_Cmd *****************
  1482 ;; Defined at:
  1483 ;;		line 45 in file "main.c"
  1484 ;; Parameters:    Size  Location     Type
  1485 ;;  data            1    wreg     unsigned char 
  1486 ;; Auto vars:     Size  Location     Type
  1487 ;;  data            1    2[COMMON] unsigned char 
  1488 ;; Return value:  Size  Location     Type
  1489 ;;                  1    wreg      void 
  1490 ;; Registers used:
  1491 ;;		wreg, status,2, status,0
  1492 ;; Tracked objects:
  1493 ;;		On entry : 0/0
  1494 ;;		On exit  : 0/0
  1495 ;;		Unchanged: 0/0
  1496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1497 ;;      Params:         0       0       0       0       0
  1498 ;;      Locals:         1       0       0       0       0
  1499 ;;      Temps:          2       0       0       0       0
  1500 ;;      Totals:         3       0       0       0       0
  1501 ;;Total ram usage:        3 bytes
  1502 ;; Hardware stack levels used: 1
  1503 ;; This function calls:
  1504 ;;		Nothing
  1505 ;; This function is called by:
  1506 ;;		_LCD_Init
  1507 ;;		_main
  1508 ;; This function uses a non-reentrant model
  1509 ;;
  1510                           
  1511     0663                     _LCD_Cmd:	
  1512                           ;psect for function _LCD_Cmd
  1513                           
  1514                           
  1515                           ;incstack = 0
  1516                           ; Regs used in _LCD_Cmd: [wreg+status,2+status,0]
  1517                           ;LCD_Cmd@data stored from wreg
  1518     0663  00F9               	movwf	LCD_Cmd@data
  1519     0664                     l674:
  1520                           
  1521                           ;main.c: 46:     PORTB = ((data << 4) & 0xF0);
  1522     0664  0879               	movf	LCD_Cmd@data,w
  1523     0665  39F0               	andlw	240
  1524     0666  1283               	bcf	3,5	;RP0=0, select bank0
  1525     0667  1303               	bcf	3,6	;RP1=0, select bank0
  1526     0668  0086               	movwf	6	;volatile
  1527     0669                     l676:
  1528                           
  1529                           ;main.c: 47:     PORTBbits.RB2 = 1;
  1530     0669  1506               	bsf	6,2	;volatile
  1531     066A                     l678:
  1532                           
  1533                           ;main.c: 48:     PORTBbits.RB1 = 0;
  1534     066A  1086               	bcf	6,1	;volatile
  1535     066B                     l680:
  1536                           
  1537                           ;main.c: 49:     PORTBbits.RB0 = 1;
  1538     066B  1006               	bcf	6,0	;volatile
  1539     066C                     l682:
  1540                           
  1541                           ;main.c: 50:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1542     066C  3007               	movlw	7
  1543     066D  00F8               	movwf	??_LCD_Cmd+1
  1544     066E  307D               	movlw	125
  1545     066F  00F7               	movwf	??_LCD_Cmd
  1546     0670                     u137:
  1547     0670  0BF7               	decfsz	??_LCD_Cmd,f
  1548     0671  2E70               	goto	u137
  1549     0672  0BF8               	decfsz	??_LCD_Cmd+1,f
  1550     0673  2E70               	goto	u137
  1551     0674                     l684:
  1552                           
  1553                           ;main.c: 51:     PORTBbits.RB2 = 0;
  1554     0674  1283               	bcf	3,5	;RP0=0, select bank0
  1555     0675  1303               	bcf	3,6	;RP1=0, select bank0
  1556     0676  1106               	bcf	6,2	;volatile
  1557     0677                     l686:
  1558                           
  1559                           ;main.c: 52: }
  1560     0677  0879               	movf	LCD_Cmd@data,w
  1561     0678  00F7               	movwf	??_LCD_Cmd
  1562     0679  3003               	movlw	3
  1563     067A                     u25:
  1564     067A  1003               	clrc
  1565     067B  0DF7               	rlf	??_LCD_Cmd,f
  1566     067C  3EFF               	addlw	-1
  1567     067D  1D03               	skipz
  1568     067E  2E7A               	goto	u25
  1569     067F  1003               	clrc
  1570     0680  0D77               	rlf	??_LCD_Cmd,w
  1571     0681  39F0               	andlw	240
  1572     0682  0086               	movwf	6	;volatile
  1573     0683                     l688:
  1574                           
  1575                           ;main.c: 53: 
  1576     0683  1506               	bsf	6,2	;volatile
  1577     0684                     l690:
  1578                           
  1579                           ;main.c: 54: void LCD_Init(){
  1580     0684  1086               	bcf	6,1	;volatile
  1581     0685                     l692:
  1582                           
  1583                           ;main.c: 55:     LCD_Cmd(0x02);
  1584     0685  1006               	bcf	6,0	;volatile
  1585     0686                     l694:
  1586                           
  1587                           ;main.c: 56:     LCD_Cmd(0x28);
  1588     0686  3007               	movlw	7
  1589     0687  00F8               	movwf	??_LCD_Cmd+1
  1590     0688  307D               	movlw	125
  1591     0689  00F7               	movwf	??_LCD_Cmd
  1592     068A                     u147:
  1593     068A  0BF7               	decfsz	??_LCD_Cmd,f
  1594     068B  2E8A               	goto	u147
  1595     068C  0BF8               	decfsz	??_LCD_Cmd+1,f
  1596     068D  2E8A               	goto	u147
  1597     068E                     l696:
  1598                           
  1599                           ;main.c: 57:     LCD_Cmd(0x0C);
  1600     068E  1283               	bcf	3,5	;RP0=0, select bank0
  1601     068F  1303               	bcf	3,6	;RP1=0, select bank0
  1602     0690  1106               	bcf	6,2	;volatile
  1603     0691                     l59:
  1604     0691  0008               	return
  1605     0692                     __end_of_LCD_Cmd:
  1606     007E                     btemp	set	126	;btemp
  1607     007E                     wtemp0	set	126
  1608                           
  1609                           	psect	config
  1610                           
  1611                           ;Config register CONFIG @ 0x2007
  1612                           ;	Oscillator Selection bits
  1613                           ;	FOSC = HS, HS oscillator
  1614                           ;	Watchdog Timer Enable bit
  1615                           ;	WDTE = ON, WDT enabled
  1616                           ;	Power-up Timer Enable bit
  1617                           ;	PWRTE = ON, PWRT enabled
  1618                           ;	Brown-out Reset Enable bit
  1619                           ;	BOREN = OFF, BOR disabled
  1620                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1621                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1622                           ;	Data EEPROM Memory Code Protection bit
  1623                           ;	CPD = OFF, Data EEPROM code protection off
  1624                           ;	Flash Program Memory Write Enable bits
  1625                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1626                           ;	In-Circuit Debugger Mode bit
  1627                           ;	DEBUG = 0x1, unprogrammed default
  1628                           ;	Flash Program Memory Code Protection bit
  1629                           ;	CP = OFF, Code protection off
  1630     2007                     	org	8199
  1631     2007  3F36               	dw	16182

Data Sizes:
    Strings     9
    Constant    0
    Data        0
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      4      11
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_String@s	PTR unsigned char  size(1) Largest target is 9
		 -> STR_1(CODE[9]), 


Critical Paths under _main in COMMON

    _main->_LCD_String
    _rtc_read_byte->_rtc_send
    _LCD_String->_LCD_Data
    _LCD_Init->_LCD_Cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     273
                            _LCD_Cmd
                           _LCD_Data
                           _LCD_Init
                         _LCD_String
                              _convd
                             _convup
                            _rtc_int
                      _rtc_read_byte
 ---------------------------------------------------------------------------------
 (1) _rtc_read_byte                                        2     2      0      45
                                              1 COMMON     2     2      0
                            _rtc_nak
                           _rtc_read
                            _rtc_res
                           _rtc_send
                           _rtc_stop
                           _waitmssp
 ---------------------------------------------------------------------------------
 (2) _rtc_stop                                             0     0      0       0
                           _waitmssp
 ---------------------------------------------------------------------------------
 (2) _rtc_send                                             1     1      0      15
                                              0 COMMON     1     1      0
                           _waitmssp
 ---------------------------------------------------------------------------------
 (2) _rtc_res                                              0     0      0       0
                           _waitmssp
 ---------------------------------------------------------------------------------
 (2) _rtc_read                                             0     0      0       0
                           _waitmssp
 ---------------------------------------------------------------------------------
 (2) _rtc_nak                                              0     0      0       0
                           _waitmssp
 ---------------------------------------------------------------------------------
 (2) _waitmssp                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _rtc_int                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _convup                                               2     2      0      15
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _convd                                                1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCD_String                                           1     1      0     108
                                              3 COMMON     1     1      0
                           _LCD_Data
 ---------------------------------------------------------------------------------
 (2) _LCD_Data                                             3     3      0      30
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             0     0      0      30
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_Cmd                                              3     3      0      30
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Cmd
   _LCD_Data
   _LCD_Init
     _LCD_Cmd
   _LCD_String
     _LCD_Data
   _convd
   _convup
   _rtc_int
   _rtc_read_byte
     _rtc_nak
       _waitmssp
     _rtc_read
       _waitmssp
     _rtc_res
       _waitmssp
     _rtc_send
       _waitmssp
     _rtc_stop
       _waitmssp
     _waitmssp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      4       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       B       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       B      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Tue Dec 19 02:54:23 2023

                      pc 0002                       l62 06C0                       l71 0662  
                     l80 05C9                       l65 0643                       l74 0624  
                     l59 0691                       l83 0608                       l92 05FD  
                     l77 05C2                       l86 060E                       l79 05C8  
                     l95 06C2                       l96 06D0                       l99 06F8  
                     u10 05C8                       u11 05C7                       u40 060E  
                     u25 067A                       u41 060D                       u35 06A9  
                     u60 0619                       u61 0615                       u80 06D6  
                     u81 06D5                       u74 061C                       u95 05EA  
                     fsr 0004              ?_LCD_String 0077                      l120 05C1  
                    l105 05DB                      l114 05E5                      l108 05D2  
                    l117 05F1                      l700 0698                      l710 06A6  
                    l702 0699                      l720 06BD                      l712 06B2  
                    l704 069A                      l714 06B3                      l706 069B  
                    l730 05F2                      l722 05FF                      l716 06B4  
                    l708 06A3                      l732 05F5                      l740 05CD  
                    l724 0603                      l900 0743                      l718 06B5  
                    l742 05DC                      l734 05FA                      l726 05D3  
                    l910 0775                      l902 074E                      l680 066B  
                    l672 05C2                      l744 05E0                      l728 05D6  
                    l760 06C2                      l920 079D                      l912 077B  
                    l904 0759                      l690 0684                      l682 066C  
                    l674 0664                      l746 0625                      l738 05CA  
                    l770 06E1                      l762 06C7                      l930 07CF  
                    l922 07A8                      l914 0786                      l906 075F  
                    l692 0685                      l684 0674                      l676 0669  
                    l780 05E7                      l756 060F                      l772 06E7  
                    l764 06CB                      l932 07D5                      l924 07B3  
                    l916 0791                      l908 076A                      l694 0686  
                    l686 0677                      l678 066A                      l870 0646  
                    l758 061C                      l774 06ED                      l766 06D6  
                    l934 07E0                      l926 07B9                      l918 0797  
                    l696 068E                      l688 0683                      l872 0652  
                    l784 05BE                      l776 06F2                      l768 06DC  
                    l936 07EB                      l928 07C4                      l880 0701  
                    l698 0693                      l874 0656                      l890 0721  
                    l882 0706                      l868 0645                      l892 0728  
                    l884 070C                      l876 06F9                      l894 072F  
                    l886 0713                      l878 06FC                      l896 0736  
                    l888 071A                      l898 073D                      u100 0662  
                    u101 0661                      u117 069F                      u127 06B9  
                    u137 0670                      u147 068A                      _PEN 048A  
                    _SEN 0488                      _day 0073                      _min 0075  
                    _sec 0076                      fsr0 0004              LCD_Cmd@data 0079  
        __end_of_LCD_Cmd 0692                     STR_1 0009                     _RCEN 048B  
                   _RSEN 0489                     _date 0072                     _main 06F9  
                   _hour 0074                     _year 0070                     btemp 007E  
                   start 0000         __end_of_LCD_Data 06C1         __end_of_LCD_Init 0644  
           LCD_Data@data 0079          ??_rtc_read_byte 0078                    ?_main 0077  
                  _ACKEN 048C                    _ACKDT 048D                    _PORTB 0006  
                  _TRISB 0086                    _SSPIF 0063              LCD_String@s 007A  
                  _convd 05BD                    _month 0071                    pclath 000A  
        __end_of_rtc_nak 05E6          __end_of_rtc_int 0625          __end_of_rtc_res 05D3  
                  status 0003                    wtemp0 007E          __initialization 07F5  
           __end_of_main 07F5                   ??_main 007B                ??_LCD_Cmd 0077  
                 ?_convd 0077                   _SSPADD 0093                   _TRISC3 043B  
                 _TRISC4 043C                   _SSPCON 0014                   _SSPBUF 0013  
                 _convup 05E6         __end_of_rtc_read 05FE         __end_of_waitmssp 05CA  
       __end_of_rtc_send 060F         __end_of_rtc_stop 05DC                ??_rtc_nak 0077  
              ??_rtc_int 0077                ??_rtc_res 0077                ?_LCD_Data 0077  
__end_of__initialization 07FC                ?_LCD_Init 0077           __pcstackCOMMON 0077  
          __end_of_convd 05C2             ??_LCD_String 007A                  ??_convd 0077  
             ??_LCD_Data 0077               ??_LCD_Init 007A       __end_of_LCD_String 0663  
             __pmaintext 06F9                  ?_convup 0077                  _ACKSTAT 048E  
                _LCD_Cmd 0663               __stringtab 0003                ?_rtc_read 0077  
              ?_waitmssp 0077                ?_rtc_send 0077                ?_rtc_stop 0077  
                __ptext1 06C1                  __ptext2 05D3                  __ptext3 05FE  
                __ptext4 05CA                  __ptext5 05F2                  __ptext6 05DC  
                __ptext7 05C2                  __ptext8 060F                  __ptext9 05E6  
  __end_of_rtc_read_byte 06F9                  _rtc_nak 05DC                  _rtc_int 060F  
                _rtc_res 05CA     end_of_initialization 07FC               ??_rtc_read 0077  
             ??_waitmssp 0077               ??_rtc_send 0077               ??_rtc_stop 0077  
              _PORTBbits 0006         rtc_read_byte@rec 0079           __end_of_convup 05F2  
    start_initialization 07F5                 ??_convup 0077                 ?_LCD_Cmd 0077  
            __pbssCOMMON 0070                ___latbits 0002                __pstrings 0003  
               ?_rtc_nak 0077                 ?_rtc_int 0077                 ?_rtc_res 0077  
               _LCD_Data 0692                 _LCD_Init 0625              __stringbase 0008  
              convup@bcd 0078       __end_of__stringtab 0009                 __ptext10 05BD  
               __ptext11 0644                 __ptext12 0692                 __ptext13 0625  
               __ptext14 0663                 _rtc_read 05F2                 _waitmssp 05C2  
               _rtc_send 05FE                 _rtc_stop 05D3                rtc_send@a 0077  
               convd@bcd 0077               _LCD_String 0644            _rtc_read_byte 06C1  
              stringcode 0003           ?_rtc_read_byte 0077                 stringdir 0003  
               stringtab 0003        rtc_read_byte@addr 0078  
